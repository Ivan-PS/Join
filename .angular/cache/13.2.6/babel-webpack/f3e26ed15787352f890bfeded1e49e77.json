{"ast":null,"code":"import _asyncToGenerator from \"/home/ivan/HACKUPC2022/Join/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { r as registerInstance, c as getIonMode, h, H as Host } from './core-feeeff0d.js';\nimport './config-3c7f3790.js';\nimport { h as createOverlay, j as dismissOverlay, k as getOverlay } from './overlays-10640d86.js';\nimport { o as openURL, c as createColorClasses } from './theme-18cbe2cc.js';\nconst ActionSheetController = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Create an action sheet overlay with action sheet options.\n   *\n   * @param options The options to use to create the action sheet.\n   */\n\n\n  create(options) {\n    return createOverlay('ion-action-sheet', options);\n  }\n  /**\n   * Dismiss the open action sheet overlay.\n   *\n   * @param data Any data to emit in the dismiss events.\n   * @param role The role of the element that is dismissing the action sheet.\n   * This can be useful in a button handler for determining which button was\n   * clicked to dismiss the action sheet.\n   * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n   * @param id The id of the action sheet to dismiss. If an id is not provided, it will dismiss the most recently opened action sheet.\n   */\n\n\n  dismiss(data, role, id) {\n    return dismissOverlay(document, data, role, 'ion-action-sheet', id);\n  }\n  /**\n   * Get the most recently opened action sheet overlay.\n   */\n\n\n  getTop() {\n    return _asyncToGenerator(function* () {\n      return getOverlay(document, 'ion-action-sheet');\n    })();\n  }\n\n};\nconst AlertController = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Create an alert overlay with alert options.\n   *\n   * @param options The options to use to create the alert.\n   */\n\n\n  create(options) {\n    return createOverlay('ion-alert', options);\n  }\n  /**\n   * Dismiss the open alert overlay.\n   *\n   * @param data Any data to emit in the dismiss events.\n   * @param role The role of the element that is dismissing the alert.\n   * This can be useful in a button handler for determining which button was\n   * clicked to dismiss the alert.\n   * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n   * @param id The id of the alert to dismiss. If an id is not provided, it will dismiss the most recently opened alert.\n   */\n\n\n  dismiss(data, role, id) {\n    return dismissOverlay(document, data, role, 'ion-alert', id);\n  }\n  /**\n   * Get the most recently opened alert overlay.\n   */\n\n\n  getTop() {\n    return _asyncToGenerator(function* () {\n      return getOverlay(document, 'ion-alert');\n    })();\n  }\n\n};\nconst Anchor = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * When using a router, it specifies the transition direction when navigating to\n     * another page using `href`.\n     */\n\n    this.routerDirection = 'forward';\n\n    this.onClick = ev => {\n      openURL(this.href, ev, this.routerDirection);\n    };\n  }\n\n  componentDidLoad() {\n    console.warn('[DEPRECATED][ion-anchor] The <ion-anchor> component has been deprecated. Please use an <ion-router-link> if you are using a vanilla JS or Stencil project or an <a> with the Angular router.');\n  }\n\n  render() {\n    const mode = getIonMode(this);\n    const attrs = {\n      href: this.href,\n      rel: this.rel\n    };\n    return h(Host, {\n      onClick: this.onClick,\n      class: Object.assign(Object.assign({}, createColorClasses(this.color)), {\n        [mode]: true,\n        'ion-activatable': true\n      })\n    }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null)));\n  }\n\n  static get style() {\n    return \":host{--background:transparent;--color:var(--ion-color-primary,#5B2E2E);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\";\n  }\n\n};\nconst LoadingController = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Create a loading overlay with loading options.\n   *\n   * @param options The options to use to create the loading.\n   */\n\n\n  create(options) {\n    return createOverlay('ion-loading', options);\n  }\n  /**\n   * Dismiss the open loading overlay.\n   *\n   * @param data Any data to emit in the dismiss events.\n   * @param role The role of the element that is dismissing the loading.\n   * This can be useful in a button handler for determining which button was\n   * clicked to dismiss the loading.\n   * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n   * @param id The id of the loading to dismiss. If an id is not provided, it will dismiss the most recently opened loading.\n   */\n\n\n  dismiss(data, role, id) {\n    return dismissOverlay(document, data, role, 'ion-loading', id);\n  }\n  /**\n   * Get the most recently opened loading overlay.\n   */\n\n\n  getTop() {\n    return _asyncToGenerator(function* () {\n      return getOverlay(document, 'ion-loading');\n    })();\n  }\n\n};\nconst ModalController = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Create a modal overlay with modal options.\n   *\n   * @param options The options to use to create the modal.\n   */\n\n\n  create(options) {\n    return createOverlay('ion-modal', options);\n  }\n  /**\n   * Dismiss the open modal overlay.\n   *\n   * @param data Any data to emit in the dismiss events.\n   * @param role The role of the element that is dismissing the modal.\n   * This can be useful in a button handler for determining which button was\n   * clicked to dismiss the modal.\n   * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n   * @param id The id of the modal to dismiss. If an id is not provided, it will dismiss the most recently opened modal.\n   */\n\n\n  dismiss(data, role, id) {\n    return dismissOverlay(document, data, role, 'ion-modal', id);\n  }\n  /**\n   * Get the most recently opened modal overlay.\n   */\n\n\n  getTop() {\n    return _asyncToGenerator(function* () {\n      return getOverlay(document, 'ion-modal');\n    })();\n  }\n\n};\nconst PickerController = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Create a picker overlay with picker options.\n   *\n   * @param options The options to use to create the picker.\n   */\n\n\n  create(options) {\n    return createOverlay('ion-picker', options);\n  }\n  /**\n   * Dismiss the open picker overlay.\n   *\n   * @param data Any data to emit in the dismiss events.\n   * @param role The role of the element that is dismissing the picker.\n   * This can be useful in a button handler for determining which button was\n   * clicked to dismiss the picker.\n   * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n   * @param id The id of the picker to dismiss. If an id is not provided, it will dismiss the most recently opened picker.\n   */\n\n\n  dismiss(data, role, id) {\n    return dismissOverlay(document, data, role, 'ion-picker', id);\n  }\n  /**\n   * Get the most recently opened picker overlay.\n   */\n\n\n  getTop() {\n    return _asyncToGenerator(function* () {\n      return getOverlay(document, 'ion-picker');\n    })();\n  }\n\n};\nconst PopoverController = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Create a popover overlay with popover options.\n   *\n   * @param options The options to use to create the popover.\n   */\n\n\n  create(options) {\n    return createOverlay('ion-popover', options);\n  }\n  /**\n   * Dismiss the open popover overlay.\n   *\n   * @param data Any data to emit in the dismiss events.\n   * @param role The role of the element that is dismissing the popover.\n   * This can be useful in a button handler for determining which button was\n   * clicked to dismiss the popover.\n   * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n   * @param id The id of the popover to dismiss. If an id is not provided, it will dismiss the most recently opened popover.\n   */\n\n\n  dismiss(data, role, id) {\n    return dismissOverlay(document, data, role, 'ion-popover', id);\n  }\n  /**\n   * Get the most recently opened popover overlay.\n   */\n\n\n  getTop() {\n    return _asyncToGenerator(function* () {\n      return getOverlay(document, 'ion-popover');\n    })();\n  }\n\n};\nconst ToastController = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Create a toast overlay with toast options.\n   *\n   * @param options The options to use to create the toast.\n   */\n\n\n  create(options) {\n    return createOverlay('ion-toast', options);\n  }\n  /**\n   * Dismiss the open toast overlay.\n   *\n   * @param data Any data to emit in the dismiss events.\n   * @param role The role of the element that is dismissing the toast. For example, 'cancel' or 'backdrop'.\n   * @param id The id of the toast to dismiss. If an id is not provided, it will dismiss the most recently opened toast.\n   */\n\n\n  dismiss(data, role, id) {\n    return dismissOverlay(document, data, role, 'ion-toast', id);\n  }\n  /**\n   * Get the most recently opened toast overlay.\n   */\n\n\n  getTop() {\n    return _asyncToGenerator(function* () {\n      return getOverlay(document, 'ion-toast');\n    })();\n  }\n\n};\nexport { ActionSheetController as ion_action_sheet_controller, AlertController as ion_alert_controller, Anchor as ion_anchor, LoadingController as ion_loading_controller, ModalController as ion_modal_controller, PickerController as ion_picker_controller, PopoverController as ion_popover_controller, ToastController as ion_toast_controller };","map":{"version":3,"sources":["/home/ivan/HACKUPC2022/Join/node_modules/ionic-mqtt/node_modules/@ionic/core/dist/esm/ion-action-sheet-controller_8.entry.js"],"names":["r","registerInstance","c","getIonMode","h","H","Host","createOverlay","j","dismissOverlay","k","getOverlay","o","openURL","createColorClasses","ActionSheetController","constructor","hostRef","create","options","dismiss","data","role","id","document","getTop","AlertController","Anchor","routerDirection","onClick","ev","href","componentDidLoad","console","warn","render","mode","attrs","rel","class","Object","assign","color","style","LoadingController","ModalController","PickerController","PopoverController","ToastController","ion_action_sheet_controller","ion_alert_controller","ion_anchor","ion_loading_controller","ion_modal_controller","ion_picker_controller","ion_popover_controller","ion_toast_controller"],"mappings":";AAAA,SAASA,CAAC,IAAIC,gBAAd,EAAgCC,CAAC,IAAIC,UAArC,EAAiDC,CAAjD,EAAoDC,CAAC,IAAIC,IAAzD,QAAqE,oBAArE;AACA,OAAO,sBAAP;AACA,SAASF,CAAC,IAAIG,aAAd,EAA6BC,CAAC,IAAIC,cAAlC,EAAkDC,CAAC,IAAIC,UAAvD,QAAyE,wBAAzE;AACA,SAASC,CAAC,IAAIC,OAAd,EAAuBX,CAAC,IAAIY,kBAA5B,QAAsD,qBAAtD;AAEA,MAAMC,qBAAqB,GAAG,MAAM;AAChCC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjBhB,IAAAA,gBAAgB,CAAC,IAAD,EAAOgB,OAAP,CAAhB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,WAAOZ,aAAa,CAAC,kBAAD,EAAqBY,OAArB,CAApB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,OAAO,CAACC,IAAD,EAAOC,IAAP,EAAaC,EAAb,EAAiB;AACpB,WAAOd,cAAc,CAACe,QAAD,EAAWH,IAAX,EAAiBC,IAAjB,EAAuB,kBAAvB,EAA2CC,EAA3C,CAArB;AACH;AACD;AACJ;AACA;;;AACUE,EAAAA,MAAM,GAAG;AAAA;AACX,aAAOd,UAAU,CAACa,QAAD,EAAW,kBAAX,CAAjB;AADW;AAEd;;AA9B+B,CAApC;AAiCA,MAAME,eAAe,GAAG,MAAM;AAC1BV,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjBhB,IAAAA,gBAAgB,CAAC,IAAD,EAAOgB,OAAP,CAAhB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,WAAOZ,aAAa,CAAC,WAAD,EAAcY,OAAd,CAApB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,OAAO,CAACC,IAAD,EAAOC,IAAP,EAAaC,EAAb,EAAiB;AACpB,WAAOd,cAAc,CAACe,QAAD,EAAWH,IAAX,EAAiBC,IAAjB,EAAuB,WAAvB,EAAoCC,EAApC,CAArB;AACH;AACD;AACJ;AACA;;;AACUE,EAAAA,MAAM,GAAG;AAAA;AACX,aAAOd,UAAU,CAACa,QAAD,EAAW,WAAX,CAAjB;AADW;AAEd;;AA9ByB,CAA9B;AAiCA,MAAMG,MAAM,GAAG,MAAM;AACjBX,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjBhB,IAAAA,gBAAgB,CAAC,IAAD,EAAOgB,OAAP,CAAhB;AACA;AACR;AACA;AACA;;AACQ,SAAKW,eAAL,GAAuB,SAAvB;;AACA,SAAKC,OAAL,GAAgBC,EAAD,IAAQ;AACnBjB,MAAAA,OAAO,CAAC,KAAKkB,IAAN,EAAYD,EAAZ,EAAgB,KAAKF,eAArB,CAAP;AACH,KAFD;AAGH;;AACDI,EAAAA,gBAAgB,GAAG;AACfC,IAAAA,OAAO,CAACC,IAAR,CAAa,8LAAb;AACH;;AACDC,EAAAA,MAAM,GAAG;AACL,UAAMC,IAAI,GAAGjC,UAAU,CAAC,IAAD,CAAvB;AACA,UAAMkC,KAAK,GAAG;AACVN,MAAAA,IAAI,EAAE,KAAKA,IADD;AAEVO,MAAAA,GAAG,EAAE,KAAKA;AAFA,KAAd;AAIA,WAAQlC,CAAC,CAACE,IAAD,EAAO;AAAEuB,MAAAA,OAAO,EAAE,KAAKA,OAAhB;AAAyBU,MAAAA,KAAK,EAAEC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB3B,kBAAkB,CAAC,KAAK4B,KAAN,CAApC,CAAd,EAAiE;AAAE,SAACN,IAAD,GAAQ,IAAV;AAAgB,2BAAmB;AAAnC,OAAjE;AAAhC,KAAP,EAAsJhC,CAAC,CAAC,GAAD,EAAMoC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,CAAN,EAAgCjC,CAAC,CAAC,MAAD,EAAS,IAAT,CAAjC,CAAvJ,CAAT;AACH;;AACe,aAALuC,KAAK,GAAG;AAAE,WAAO,wYAAP;AAAkZ;;AAvBtZ,CAArB;AA0BA,MAAMC,iBAAiB,GAAG,MAAM;AAC5B5B,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjBhB,IAAAA,gBAAgB,CAAC,IAAD,EAAOgB,OAAP,CAAhB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,WAAOZ,aAAa,CAAC,aAAD,EAAgBY,OAAhB,CAApB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,OAAO,CAACC,IAAD,EAAOC,IAAP,EAAaC,EAAb,EAAiB;AACpB,WAAOd,cAAc,CAACe,QAAD,EAAWH,IAAX,EAAiBC,IAAjB,EAAuB,aAAvB,EAAsCC,EAAtC,CAArB;AACH;AACD;AACJ;AACA;;;AACUE,EAAAA,MAAM,GAAG;AAAA;AACX,aAAOd,UAAU,CAACa,QAAD,EAAW,aAAX,CAAjB;AADW;AAEd;;AA9B2B,CAAhC;AAiCA,MAAMqB,eAAe,GAAG,MAAM;AAC1B7B,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjBhB,IAAAA,gBAAgB,CAAC,IAAD,EAAOgB,OAAP,CAAhB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,WAAOZ,aAAa,CAAC,WAAD,EAAcY,OAAd,CAApB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,OAAO,CAACC,IAAD,EAAOC,IAAP,EAAaC,EAAb,EAAiB;AACpB,WAAOd,cAAc,CAACe,QAAD,EAAWH,IAAX,EAAiBC,IAAjB,EAAuB,WAAvB,EAAoCC,EAApC,CAArB;AACH;AACD;AACJ;AACA;;;AACUE,EAAAA,MAAM,GAAG;AAAA;AACX,aAAOd,UAAU,CAACa,QAAD,EAAW,WAAX,CAAjB;AADW;AAEd;;AA9ByB,CAA9B;AAiCA,MAAMsB,gBAAgB,GAAG,MAAM;AAC3B9B,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjBhB,IAAAA,gBAAgB,CAAC,IAAD,EAAOgB,OAAP,CAAhB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,WAAOZ,aAAa,CAAC,YAAD,EAAeY,OAAf,CAApB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,OAAO,CAACC,IAAD,EAAOC,IAAP,EAAaC,EAAb,EAAiB;AACpB,WAAOd,cAAc,CAACe,QAAD,EAAWH,IAAX,EAAiBC,IAAjB,EAAuB,YAAvB,EAAqCC,EAArC,CAArB;AACH;AACD;AACJ;AACA;;;AACUE,EAAAA,MAAM,GAAG;AAAA;AACX,aAAOd,UAAU,CAACa,QAAD,EAAW,YAAX,CAAjB;AADW;AAEd;;AA9B0B,CAA/B;AAiCA,MAAMuB,iBAAiB,GAAG,MAAM;AAC5B/B,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjBhB,IAAAA,gBAAgB,CAAC,IAAD,EAAOgB,OAAP,CAAhB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,WAAOZ,aAAa,CAAC,aAAD,EAAgBY,OAAhB,CAApB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,OAAO,CAACC,IAAD,EAAOC,IAAP,EAAaC,EAAb,EAAiB;AACpB,WAAOd,cAAc,CAACe,QAAD,EAAWH,IAAX,EAAiBC,IAAjB,EAAuB,aAAvB,EAAsCC,EAAtC,CAArB;AACH;AACD;AACJ;AACA;;;AACUE,EAAAA,MAAM,GAAG;AAAA;AACX,aAAOd,UAAU,CAACa,QAAD,EAAW,aAAX,CAAjB;AADW;AAEd;;AA9B2B,CAAhC;AAiCA,MAAMwB,eAAe,GAAG,MAAM;AAC1BhC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjBhB,IAAAA,gBAAgB,CAAC,IAAD,EAAOgB,OAAP,CAAhB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,WAAOZ,aAAa,CAAC,WAAD,EAAcY,OAAd,CAApB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,OAAO,CAACC,IAAD,EAAOC,IAAP,EAAaC,EAAb,EAAiB;AACpB,WAAOd,cAAc,CAACe,QAAD,EAAWH,IAAX,EAAiBC,IAAjB,EAAuB,WAAvB,EAAoCC,EAApC,CAArB;AACH;AACD;AACJ;AACA;;;AACUE,EAAAA,MAAM,GAAG;AAAA;AACX,aAAOd,UAAU,CAACa,QAAD,EAAW,WAAX,CAAjB;AADW;AAEd;;AA3ByB,CAA9B;AA8BA,SAAST,qBAAqB,IAAIkC,2BAAlC,EAA+DvB,eAAe,IAAIwB,oBAAlF,EAAwGvB,MAAM,IAAIwB,UAAlH,EAA8HP,iBAAiB,IAAIQ,sBAAnJ,EAA2KP,eAAe,IAAIQ,oBAA9L,EAAoNP,gBAAgB,IAAIQ,qBAAxO,EAA+PP,iBAAiB,IAAIQ,sBAApR,EAA4SP,eAAe,IAAIQ,oBAA/T","sourcesContent":["import { r as registerInstance, c as getIonMode, h, H as Host } from './core-feeeff0d.js';\nimport './config-3c7f3790.js';\nimport { h as createOverlay, j as dismissOverlay, k as getOverlay } from './overlays-10640d86.js';\nimport { o as openURL, c as createColorClasses } from './theme-18cbe2cc.js';\n\nconst ActionSheetController = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    /**\n     * Create an action sheet overlay with action sheet options.\n     *\n     * @param options The options to use to create the action sheet.\n     */\n    create(options) {\n        return createOverlay('ion-action-sheet', options);\n    }\n    /**\n     * Dismiss the open action sheet overlay.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the action sheet.\n     * This can be useful in a button handler for determining which button was\n     * clicked to dismiss the action sheet.\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n     * @param id The id of the action sheet to dismiss. If an id is not provided, it will dismiss the most recently opened action sheet.\n     */\n    dismiss(data, role, id) {\n        return dismissOverlay(document, data, role, 'ion-action-sheet', id);\n    }\n    /**\n     * Get the most recently opened action sheet overlay.\n     */\n    async getTop() {\n        return getOverlay(document, 'ion-action-sheet');\n    }\n};\n\nconst AlertController = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    /**\n     * Create an alert overlay with alert options.\n     *\n     * @param options The options to use to create the alert.\n     */\n    create(options) {\n        return createOverlay('ion-alert', options);\n    }\n    /**\n     * Dismiss the open alert overlay.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the alert.\n     * This can be useful in a button handler for determining which button was\n     * clicked to dismiss the alert.\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n     * @param id The id of the alert to dismiss. If an id is not provided, it will dismiss the most recently opened alert.\n     */\n    dismiss(data, role, id) {\n        return dismissOverlay(document, data, role, 'ion-alert', id);\n    }\n    /**\n     * Get the most recently opened alert overlay.\n     */\n    async getTop() {\n        return getOverlay(document, 'ion-alert');\n    }\n};\n\nconst Anchor = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * When using a router, it specifies the transition direction when navigating to\n         * another page using `href`.\n         */\n        this.routerDirection = 'forward';\n        this.onClick = (ev) => {\n            openURL(this.href, ev, this.routerDirection);\n        };\n    }\n    componentDidLoad() {\n        console.warn('[DEPRECATED][ion-anchor] The <ion-anchor> component has been deprecated. Please use an <ion-router-link> if you are using a vanilla JS or Stencil project or an <a> with the Angular router.');\n    }\n    render() {\n        const mode = getIonMode(this);\n        const attrs = {\n            href: this.href,\n            rel: this.rel\n        };\n        return (h(Host, { onClick: this.onClick, class: Object.assign(Object.assign({}, createColorClasses(this.color)), { [mode]: true, 'ion-activatable': true }) }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null))));\n    }\n    static get style() { return \":host{--background:transparent;--color:var(--ion-color-primary,#5B2E2E);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\"; }\n};\n\nconst LoadingController = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    /**\n     * Create a loading overlay with loading options.\n     *\n     * @param options The options to use to create the loading.\n     */\n    create(options) {\n        return createOverlay('ion-loading', options);\n    }\n    /**\n     * Dismiss the open loading overlay.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the loading.\n     * This can be useful in a button handler for determining which button was\n     * clicked to dismiss the loading.\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n     * @param id The id of the loading to dismiss. If an id is not provided, it will dismiss the most recently opened loading.\n     */\n    dismiss(data, role, id) {\n        return dismissOverlay(document, data, role, 'ion-loading', id);\n    }\n    /**\n     * Get the most recently opened loading overlay.\n     */\n    async getTop() {\n        return getOverlay(document, 'ion-loading');\n    }\n};\n\nconst ModalController = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    /**\n     * Create a modal overlay with modal options.\n     *\n     * @param options The options to use to create the modal.\n     */\n    create(options) {\n        return createOverlay('ion-modal', options);\n    }\n    /**\n     * Dismiss the open modal overlay.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the modal.\n     * This can be useful in a button handler for determining which button was\n     * clicked to dismiss the modal.\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n     * @param id The id of the modal to dismiss. If an id is not provided, it will dismiss the most recently opened modal.\n     */\n    dismiss(data, role, id) {\n        return dismissOverlay(document, data, role, 'ion-modal', id);\n    }\n    /**\n     * Get the most recently opened modal overlay.\n     */\n    async getTop() {\n        return getOverlay(document, 'ion-modal');\n    }\n};\n\nconst PickerController = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    /**\n     * Create a picker overlay with picker options.\n     *\n     * @param options The options to use to create the picker.\n     */\n    create(options) {\n        return createOverlay('ion-picker', options);\n    }\n    /**\n     * Dismiss the open picker overlay.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the picker.\n     * This can be useful in a button handler for determining which button was\n     * clicked to dismiss the picker.\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n     * @param id The id of the picker to dismiss. If an id is not provided, it will dismiss the most recently opened picker.\n     */\n    dismiss(data, role, id) {\n        return dismissOverlay(document, data, role, 'ion-picker', id);\n    }\n    /**\n     * Get the most recently opened picker overlay.\n     */\n    async getTop() {\n        return getOverlay(document, 'ion-picker');\n    }\n};\n\nconst PopoverController = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    /**\n     * Create a popover overlay with popover options.\n     *\n     * @param options The options to use to create the popover.\n     */\n    create(options) {\n        return createOverlay('ion-popover', options);\n    }\n    /**\n     * Dismiss the open popover overlay.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the popover.\n     * This can be useful in a button handler for determining which button was\n     * clicked to dismiss the popover.\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n     * @param id The id of the popover to dismiss. If an id is not provided, it will dismiss the most recently opened popover.\n     */\n    dismiss(data, role, id) {\n        return dismissOverlay(document, data, role, 'ion-popover', id);\n    }\n    /**\n     * Get the most recently opened popover overlay.\n     */\n    async getTop() {\n        return getOverlay(document, 'ion-popover');\n    }\n};\n\nconst ToastController = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    /**\n     * Create a toast overlay with toast options.\n     *\n     * @param options The options to use to create the toast.\n     */\n    create(options) {\n        return createOverlay('ion-toast', options);\n    }\n    /**\n     * Dismiss the open toast overlay.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the toast. For example, 'cancel' or 'backdrop'.\n     * @param id The id of the toast to dismiss. If an id is not provided, it will dismiss the most recently opened toast.\n     */\n    dismiss(data, role, id) {\n        return dismissOverlay(document, data, role, 'ion-toast', id);\n    }\n    /**\n     * Get the most recently opened toast overlay.\n     */\n    async getTop() {\n        return getOverlay(document, 'ion-toast');\n    }\n};\n\nexport { ActionSheetController as ion_action_sheet_controller, AlertController as ion_alert_controller, Anchor as ion_anchor, LoadingController as ion_loading_controller, ModalController as ion_modal_controller, PickerController as ion_picker_controller, PopoverController as ion_popover_controller, ToastController as ion_toast_controller };\n"]},"metadata":{},"sourceType":"module"}
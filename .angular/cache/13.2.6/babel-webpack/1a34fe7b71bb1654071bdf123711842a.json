{"ast":null,"code":"import _asyncToGenerator from \"/home/ivan/HACKUPC2022/Join/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { r as registerInstance, d as createEvent, f as readTask, c as getIonMode, h, H as Host, e as getElement } from './core-feeeff0d.js';\nimport './config-3c7f3790.js';\nimport { d as debounceEvent, f as findItemLabel } from './helpers-46f4a262.js';\nimport { c as createColorClasses } from './theme-18cbe2cc.js';\nconst Textarea = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.inputId = `ion-input-${textareaIds++}`;\n    this.didBlurAfterEdit = false;\n    this.hasFocus = false;\n    /**\n     * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\n     */\n\n    this.autocapitalize = 'none';\n    /**\n     * This Boolean attribute lets you specify that a form control should have input focus when the page loads.\n     */\n\n    this.autofocus = false;\n    /**\n     * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `\"password\"`, `false` for all other types.\n     */\n\n    this.clearOnEdit = false;\n    /**\n     * Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke.\n     */\n\n    this.debounce = 0;\n    /**\n     * If `true`, the user cannot interact with the textarea.\n     */\n\n    this.disabled = false;\n    /**\n     * The name of the control, which is submitted with the form data.\n     */\n\n    this.name = this.inputId;\n    /**\n     * If `true`, the user cannot modify the value.\n     */\n\n    this.readonly = false;\n    /**\n     * If `true`, the user must fill in a value before submitting a form.\n     */\n\n    this.required = false;\n    /**\n     * If `true`, the element will have its spelling and grammar checked.\n     */\n\n    this.spellcheck = false;\n    /**\n     * If `true`, the element height will increase based on the value.\n     */\n\n    this.autoGrow = false;\n    /**\n     * The value of the textarea.\n     */\n\n    this.value = '';\n\n    this.onInput = ev => {\n      if (this.nativeInput) {\n        this.value = this.nativeInput.value;\n      }\n\n      this.emitStyle();\n      this.ionInput.emit(ev);\n    };\n\n    this.onFocus = () => {\n      this.hasFocus = true;\n      this.focusChange();\n      this.ionFocus.emit();\n    };\n\n    this.onBlur = () => {\n      this.hasFocus = false;\n      this.focusChange();\n      this.ionBlur.emit();\n    };\n\n    this.onKeyDown = () => {\n      this.checkClearOnEdit();\n    };\n\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    this.ionInput = createEvent(this, \"ionInput\", 7);\n    this.ionStyle = createEvent(this, \"ionStyle\", 7);\n    this.ionBlur = createEvent(this, \"ionBlur\", 7);\n    this.ionFocus = createEvent(this, \"ionFocus\", 7);\n  }\n\n  debounceChanged() {\n    this.ionChange = debounceEvent(this.ionChange, this.debounce);\n  }\n\n  disabledChanged() {\n    this.emitStyle();\n  }\n  /**\n   * Update the native input element when the value changes\n   */\n\n\n  valueChanged() {\n    const nativeInput = this.nativeInput;\n    const value = this.getValue();\n\n    if (nativeInput && nativeInput.value !== value) {\n      nativeInput.value = value;\n    }\n\n    this.runAutoGrow();\n    this.emitStyle();\n    this.ionChange.emit({\n      value\n    });\n  }\n\n  connectedCallback() {\n    this.emitStyle();\n    this.debounceChanged();\n    {\n      this.el.dispatchEvent(new CustomEvent('ionInputDidLoad', {\n        detail: this.el\n      }));\n    }\n  }\n\n  disconnectedCallback() {\n    {\n      document.dispatchEvent(new CustomEvent('ionInputDidUnload', {\n        detail: this.el\n      }));\n    }\n  }\n\n  componentDidLoad() {\n    this.runAutoGrow();\n  } // TODO: performance hit, this cause layout thrashing\n\n\n  runAutoGrow() {\n    const nativeInput = this.nativeInput;\n\n    if (nativeInput && this.autoGrow) {\n      readTask(() => {\n        nativeInput.style.height = 'inherit';\n        nativeInput.style.height = nativeInput.scrollHeight + 'px';\n      });\n    }\n  }\n  /**\n   * Sets focus on the specified `ion-textarea`. Use this method instead of the global\n   * `input.focus()`.\n   */\n\n\n  setFocus() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.nativeInput) {\n        _this.nativeInput.focus();\n      }\n    })();\n  }\n  /**\n   * Returns the native `<textarea>` element used under the hood.\n   */\n\n\n  getInputElement() {\n    return Promise.resolve(this.nativeInput);\n  }\n\n  emitStyle() {\n    this.ionStyle.emit({\n      'interactive': true,\n      'textarea': true,\n      'input': true,\n      'interactive-disabled': this.disabled,\n      'has-placeholder': this.placeholder != null,\n      'has-value': this.hasValue(),\n      'has-focus': this.hasFocus\n    });\n  }\n  /**\n   * Check if we need to clear the text input if clearOnEdit is enabled\n   */\n\n\n  checkClearOnEdit() {\n    if (!this.clearOnEdit) {\n      return;\n    } // Did the input value change after it was blurred and edited?\n\n\n    if (this.didBlurAfterEdit && this.hasValue()) {\n      // Clear the input\n      this.value = '';\n    } // Reset the flag\n\n\n    this.didBlurAfterEdit = false;\n  }\n\n  focusChange() {\n    // If clearOnEdit is enabled and the input blurred but has a value, set a flag\n    if (this.clearOnEdit && !this.hasFocus && this.hasValue()) {\n      this.didBlurAfterEdit = true;\n    }\n\n    this.emitStyle();\n  }\n\n  hasValue() {\n    return this.getValue() !== '';\n  }\n\n  getValue() {\n    return this.value || '';\n  }\n\n  render() {\n    const mode = getIonMode(this);\n    const value = this.getValue();\n    const labelId = this.inputId + '-lbl';\n    const label = findItemLabel(this.el);\n\n    if (label) {\n      label.id = labelId;\n    }\n\n    return h(Host, {\n      \"aria-disabled\": this.disabled ? 'true' : null,\n      class: Object.assign(Object.assign({}, createColorClasses(this.color)), {\n        [mode]: true\n      })\n    }, h(\"textarea\", {\n      class: \"native-textarea\",\n      ref: el => this.nativeInput = el,\n      autoCapitalize: this.autocapitalize,\n      autoFocus: this.autofocus,\n      disabled: this.disabled,\n      maxLength: this.maxlength,\n      minLength: this.minlength,\n      name: this.name,\n      placeholder: this.placeholder || '',\n      readOnly: this.readonly,\n      required: this.required,\n      spellCheck: this.spellcheck,\n      cols: this.cols,\n      rows: this.rows,\n      wrap: this.wrap,\n      onInput: this.onInput,\n      onBlur: this.onBlur,\n      onFocus: this.onFocus,\n      onKeyDown: this.onKeyDown\n    }, value));\n  }\n\n  get el() {\n    return getElement(this);\n  }\n\n  static get watchers() {\n    return {\n      \"debounce\": [\"debounceChanged\"],\n      \"disabled\": [\"disabledChanged\"],\n      \"value\": [\"valueChanged\"]\n    };\n  }\n\n  static get style() {\n    return \".sc-ion-textarea-ios-h{--background:initial;--color:initial;--placeholder-color:initial;--placeholder-font-style:initial;--placeholder-font-weight:initial;--placeholder-opacity:.5;--padding-top:0;--padding-end:0;--padding-bottom:0;--border-radius:0;display:block;position:relative;-ms-flex:1;flex:1;width:100%;-webkit-box-sizing:border-box;box-sizing:border-box;background:var(--background);color:var(--color);font-family:var(--ion-font-family,inherit);white-space:pre-wrap;z-index:2}.ion-color.sc-ion-textarea-ios-h{background:initial;color:var(--ion-color-base)}ion-item.sc-ion-textarea-ios-h, ion-item .sc-ion-textarea-ios-h{-ms-flex-item-align:baseline;align-self:baseline}ion-item.sc-ion-textarea-ios-h:not(.item-label), ion-item:not(.item-label) .sc-ion-textarea-ios-h{--padding-start:0}.native-textarea.sc-ion-textarea-ios{border-radius:var(--border-radius);margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:var(--padding-start);padding-right:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;display:block;width:100%;max-width:100%;max-height:100%;border:0;outline:none;background:transparent;-webkit-box-sizing:border-box;box-sizing:border-box;resize:none;-webkit-appearance:none;-moz-appearance:none;appearance:none}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){.native-textarea.sc-ion-textarea-ios{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end)}}.native-textarea.sc-ion-textarea-ios::-webkit-input-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-textarea.sc-ion-textarea-ios::-moz-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-textarea.sc-ion-textarea-ios:-ms-input-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-textarea.sc-ion-textarea-ios::-ms-input-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-textarea.sc-ion-textarea-ios::placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-textarea[disabled].sc-ion-textarea-ios{opacity:.4}.cloned-input.sc-ion-textarea-ios{left:0;top:0;position:absolute;pointer-events:none}[dir=rtl].sc-ion-textarea-ios-h .cloned-input.sc-ion-textarea-ios, [dir=rtl] .sc-ion-textarea-ios-h .cloned-input.sc-ion-textarea-ios, [dir=rtl].sc-ion-textarea-ios .cloned-input.sc-ion-textarea-ios{left:unset;right:unset;right:0}.sc-ion-textarea-ios-h{--padding-top:10px;--padding-end:8px;--padding-bottom:10px;--padding-start:0;font-size:inherit}.item-label-floating.sc-ion-textarea-ios-h, .item-label-floating .sc-ion-textarea-ios-h, .item-label-stacked.sc-ion-textarea-ios-h, .item-label-stacked .sc-ion-textarea-ios-h{--padding-top:8px;--padding-bottom:8px;--padding-start:0px}\";\n  }\n\n};\nlet textareaIds = 0;\nexport { Textarea as ion_textarea };","map":{"version":3,"sources":["/home/ivan/HACKUPC2022/Join/node_modules/ionic-mqtt/node_modules/@ionic/core/dist/esm/ion-textarea-ios.entry.js"],"names":["r","registerInstance","d","createEvent","f","readTask","c","getIonMode","h","H","Host","e","getElement","debounceEvent","findItemLabel","createColorClasses","Textarea","constructor","hostRef","inputId","textareaIds","didBlurAfterEdit","hasFocus","autocapitalize","autofocus","clearOnEdit","debounce","disabled","name","readonly","required","spellcheck","autoGrow","value","onInput","ev","nativeInput","emitStyle","ionInput","emit","onFocus","focusChange","ionFocus","onBlur","ionBlur","onKeyDown","checkClearOnEdit","ionChange","ionStyle","debounceChanged","disabledChanged","valueChanged","getValue","runAutoGrow","connectedCallback","el","dispatchEvent","CustomEvent","detail","disconnectedCallback","document","componentDidLoad","style","height","scrollHeight","setFocus","focus","getInputElement","Promise","resolve","placeholder","hasValue","render","mode","labelId","label","id","class","Object","assign","color","ref","autoCapitalize","autoFocus","maxLength","maxlength","minLength","minlength","readOnly","spellCheck","cols","rows","wrap","watchers","ion_textarea"],"mappings":"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","sourcesContent":["import { r as registerInstance, d as createEvent, f as readTask, c as getIonMode, h, H as Host, e as getElement } from './core-feeeff0d.js';\nimport './config-3c7f3790.js';\nimport { d as debounceEvent, f as findItemLabel } from './helpers-46f4a262.js';\nimport { c as createColorClasses } from './theme-18cbe2cc.js';\n\nconst Textarea = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.inputId = `ion-input-${textareaIds++}`;\n        this.didBlurAfterEdit = false;\n        this.hasFocus = false;\n        /**\n         * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\n         */\n        this.autocapitalize = 'none';\n        /**\n         * This Boolean attribute lets you specify that a form control should have input focus when the page loads.\n         */\n        this.autofocus = false;\n        /**\n         * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `\"password\"`, `false` for all other types.\n         */\n        this.clearOnEdit = false;\n        /**\n         * Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke.\n         */\n        this.debounce = 0;\n        /**\n         * If `true`, the user cannot interact with the textarea.\n         */\n        this.disabled = false;\n        /**\n         * The name of the control, which is submitted with the form data.\n         */\n        this.name = this.inputId;\n        /**\n         * If `true`, the user cannot modify the value.\n         */\n        this.readonly = false;\n        /**\n         * If `true`, the user must fill in a value before submitting a form.\n         */\n        this.required = false;\n        /**\n         * If `true`, the element will have its spelling and grammar checked.\n         */\n        this.spellcheck = false;\n        /**\n         * If `true`, the element height will increase based on the value.\n         */\n        this.autoGrow = false;\n        /**\n         * The value of the textarea.\n         */\n        this.value = '';\n        this.onInput = (ev) => {\n            if (this.nativeInput) {\n                this.value = this.nativeInput.value;\n            }\n            this.emitStyle();\n            this.ionInput.emit(ev);\n        };\n        this.onFocus = () => {\n            this.hasFocus = true;\n            this.focusChange();\n            this.ionFocus.emit();\n        };\n        this.onBlur = () => {\n            this.hasFocus = false;\n            this.focusChange();\n            this.ionBlur.emit();\n        };\n        this.onKeyDown = () => {\n            this.checkClearOnEdit();\n        };\n        this.ionChange = createEvent(this, \"ionChange\", 7);\n        this.ionInput = createEvent(this, \"ionInput\", 7);\n        this.ionStyle = createEvent(this, \"ionStyle\", 7);\n        this.ionBlur = createEvent(this, \"ionBlur\", 7);\n        this.ionFocus = createEvent(this, \"ionFocus\", 7);\n    }\n    debounceChanged() {\n        this.ionChange = debounceEvent(this.ionChange, this.debounce);\n    }\n    disabledChanged() {\n        this.emitStyle();\n    }\n    /**\n     * Update the native input element when the value changes\n     */\n    valueChanged() {\n        const nativeInput = this.nativeInput;\n        const value = this.getValue();\n        if (nativeInput && nativeInput.value !== value) {\n            nativeInput.value = value;\n        }\n        this.runAutoGrow();\n        this.emitStyle();\n        this.ionChange.emit({ value });\n    }\n    connectedCallback() {\n        this.emitStyle();\n        this.debounceChanged();\n        {\n            this.el.dispatchEvent(new CustomEvent('ionInputDidLoad', {\n                detail: this.el\n            }));\n        }\n    }\n    disconnectedCallback() {\n        {\n            document.dispatchEvent(new CustomEvent('ionInputDidUnload', {\n                detail: this.el\n            }));\n        }\n    }\n    componentDidLoad() {\n        this.runAutoGrow();\n    }\n    // TODO: performance hit, this cause layout thrashing\n    runAutoGrow() {\n        const nativeInput = this.nativeInput;\n        if (nativeInput && this.autoGrow) {\n            readTask(() => {\n                nativeInput.style.height = 'inherit';\n                nativeInput.style.height = nativeInput.scrollHeight + 'px';\n            });\n        }\n    }\n    /**\n     * Sets focus on the specified `ion-textarea`. Use this method instead of the global\n     * `input.focus()`.\n     */\n    async setFocus() {\n        if (this.nativeInput) {\n            this.nativeInput.focus();\n        }\n    }\n    /**\n     * Returns the native `<textarea>` element used under the hood.\n     */\n    getInputElement() {\n        return Promise.resolve(this.nativeInput);\n    }\n    emitStyle() {\n        this.ionStyle.emit({\n            'interactive': true,\n            'textarea': true,\n            'input': true,\n            'interactive-disabled': this.disabled,\n            'has-placeholder': this.placeholder != null,\n            'has-value': this.hasValue(),\n            'has-focus': this.hasFocus\n        });\n    }\n    /**\n     * Check if we need to clear the text input if clearOnEdit is enabled\n     */\n    checkClearOnEdit() {\n        if (!this.clearOnEdit) {\n            return;\n        }\n        // Did the input value change after it was blurred and edited?\n        if (this.didBlurAfterEdit && this.hasValue()) {\n            // Clear the input\n            this.value = '';\n        }\n        // Reset the flag\n        this.didBlurAfterEdit = false;\n    }\n    focusChange() {\n        // If clearOnEdit is enabled and the input blurred but has a value, set a flag\n        if (this.clearOnEdit && !this.hasFocus && this.hasValue()) {\n            this.didBlurAfterEdit = true;\n        }\n        this.emitStyle();\n    }\n    hasValue() {\n        return this.getValue() !== '';\n    }\n    getValue() {\n        return this.value || '';\n    }\n    render() {\n        const mode = getIonMode(this);\n        const value = this.getValue();\n        const labelId = this.inputId + '-lbl';\n        const label = findItemLabel(this.el);\n        if (label) {\n            label.id = labelId;\n        }\n        return (h(Host, { \"aria-disabled\": this.disabled ? 'true' : null, class: Object.assign(Object.assign({}, createColorClasses(this.color)), { [mode]: true }) }, h(\"textarea\", { class: \"native-textarea\", ref: el => this.nativeInput = el, autoCapitalize: this.autocapitalize, autoFocus: this.autofocus, disabled: this.disabled, maxLength: this.maxlength, minLength: this.minlength, name: this.name, placeholder: this.placeholder || '', readOnly: this.readonly, required: this.required, spellCheck: this.spellcheck, cols: this.cols, rows: this.rows, wrap: this.wrap, onInput: this.onInput, onBlur: this.onBlur, onFocus: this.onFocus, onKeyDown: this.onKeyDown }, value)));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"debounce\": [\"debounceChanged\"],\n        \"disabled\": [\"disabledChanged\"],\n        \"value\": [\"valueChanged\"]\n    }; }\n    static get style() { return \".sc-ion-textarea-ios-h{--background:initial;--color:initial;--placeholder-color:initial;--placeholder-font-style:initial;--placeholder-font-weight:initial;--placeholder-opacity:.5;--padding-top:0;--padding-end:0;--padding-bottom:0;--border-radius:0;display:block;position:relative;-ms-flex:1;flex:1;width:100%;-webkit-box-sizing:border-box;box-sizing:border-box;background:var(--background);color:var(--color);font-family:var(--ion-font-family,inherit);white-space:pre-wrap;z-index:2}.ion-color.sc-ion-textarea-ios-h{background:initial;color:var(--ion-color-base)}ion-item.sc-ion-textarea-ios-h, ion-item .sc-ion-textarea-ios-h{-ms-flex-item-align:baseline;align-self:baseline}ion-item.sc-ion-textarea-ios-h:not(.item-label), ion-item:not(.item-label) .sc-ion-textarea-ios-h{--padding-start:0}.native-textarea.sc-ion-textarea-ios{border-radius:var(--border-radius);margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:var(--padding-start);padding-right:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;display:block;width:100%;max-width:100%;max-height:100%;border:0;outline:none;background:transparent;-webkit-box-sizing:border-box;box-sizing:border-box;resize:none;-webkit-appearance:none;-moz-appearance:none;appearance:none}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){.native-textarea.sc-ion-textarea-ios{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end)}}.native-textarea.sc-ion-textarea-ios::-webkit-input-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-textarea.sc-ion-textarea-ios::-moz-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-textarea.sc-ion-textarea-ios:-ms-input-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-textarea.sc-ion-textarea-ios::-ms-input-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-textarea.sc-ion-textarea-ios::placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-textarea[disabled].sc-ion-textarea-ios{opacity:.4}.cloned-input.sc-ion-textarea-ios{left:0;top:0;position:absolute;pointer-events:none}[dir=rtl].sc-ion-textarea-ios-h .cloned-input.sc-ion-textarea-ios, [dir=rtl] .sc-ion-textarea-ios-h .cloned-input.sc-ion-textarea-ios, [dir=rtl].sc-ion-textarea-ios .cloned-input.sc-ion-textarea-ios{left:unset;right:unset;right:0}.sc-ion-textarea-ios-h{--padding-top:10px;--padding-end:8px;--padding-bottom:10px;--padding-start:0;font-size:inherit}.item-label-floating.sc-ion-textarea-ios-h, .item-label-floating .sc-ion-textarea-ios-h, .item-label-stacked.sc-ion-textarea-ios-h, .item-label-stacked .sc-ion-textarea-ios-h{--padding-top:8px;--padding-bottom:8px;--padding-start:0px}\"; }\n};\nlet textareaIds = 0;\n\nexport { Textarea as ion_textarea };\n"]},"metadata":{},"sourceType":"module"}
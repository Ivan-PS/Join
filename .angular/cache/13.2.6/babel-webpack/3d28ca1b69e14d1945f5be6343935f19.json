{"ast":null,"code":"import _asyncToGenerator from \"/home/ivan/HACKUPC2022/Join/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { r as registerInstance, d as createEvent, w as writeTask, c as getIonMode, h, e as getElement, H as Host } from './core-feeeff0d.js';\nimport { b as config } from './config-3c7f3790.js';\nimport { s as sanitizeDOMString } from './index-3476b023.js';\nconst Refresher = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.appliedStyles = false;\n    this.didStart = false;\n    this.progress = 0;\n    /**\n     * The current state which the refresher is in. The refresher's states include:\n     *\n     * - `inactive` - The refresher is not being pulled down or refreshing and is currently hidden.\n     * - `pulling` - The user is actively pulling down the refresher, but has not reached the point yet that if the user lets go, it'll refresh.\n     * - `cancelling` - The user pulled down the refresher and let go, but did not pull down far enough to kick off the `refreshing` state. After letting go, the refresher is in the `cancelling` state while it is closing, and will go back to the `inactive` state once closed.\n     * - `ready` - The user has pulled down the refresher far enough that if they let go, it'll begin the `refreshing` state.\n     * - `refreshing` - The refresher is actively waiting on the async operation to end. Once the refresh handler calls `complete()` it will begin the `completing` state.\n     * - `completing` - The `refreshing` state has finished and the refresher is in the way of closing itself. Once closed, the refresher will go back to the `inactive` state.\n     */\n\n    this.state = 1\n    /* Inactive */\n    ;\n    /**\n     * The minimum distance the user must pull down until the\n     * refresher will go into the `refreshing` state.\n     */\n\n    this.pullMin = 60;\n    /**\n     * The maximum distance of the pull until the refresher\n     * will automatically go into the `refreshing` state.\n     * Defaults to the result of `pullMin + 60`.\n     */\n\n    this.pullMax = this.pullMin + 60;\n    /**\n     * Time it takes to close the refresher.\n     */\n\n    this.closeDuration = '280ms';\n    /**\n     * Time it takes the refresher to to snap back to the `refreshing` state.\n     */\n\n    this.snapbackDuration = '280ms';\n    /**\n     * How much to multiply the pull speed by. To slow the pull animation down,\n     * pass a number less than `1`. To speed up the pull, pass a number greater\n     * than `1`. The default value is `1` which is equal to the speed of the cursor.\n     * If a negative value is passed in, the factor will be `1` instead.\n     *\n     * For example: If the value passed is `1.2` and the content is dragged by\n     * `10` pixels, instead of `10` pixels the content will be pulled by `12` pixels\n     * (an increase of 20 percent). If the value passed is `0.8`, the dragged amount\n     * will be `8` pixels, less than the amount the cursor has moved.\n     */\n\n    this.pullFactor = 1;\n    /**\n     * If `true`, the refresher will be hidden.\n     */\n\n    this.disabled = false;\n    this.ionRefresh = createEvent(this, \"ionRefresh\", 7);\n    this.ionPull = createEvent(this, \"ionPull\", 7);\n    this.ionStart = createEvent(this, \"ionStart\", 7);\n  }\n\n  disabledChanged() {\n    if (this.gesture) {\n      this.gesture.setDisabled(this.disabled);\n    }\n  }\n\n  connectedCallback() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.el.getAttribute('slot') !== 'fixed') {\n        console.error('Make sure you use: <ion-refresher slot=\"fixed\">');\n        return;\n      }\n\n      const contentEl = _this.el.closest('ion-content');\n\n      if (!contentEl) {\n        console.error('<ion-refresher> must be used inside an <ion-content>');\n        return;\n      }\n\n      _this.scrollEl = yield contentEl.getScrollElement();\n      _this.gesture = (yield import('./index-624eea58.js')).createGesture({\n        el: contentEl,\n        gestureName: 'refresher',\n        gesturePriority: 10,\n        direction: 'y',\n        threshold: 20,\n        passive: false,\n        canStart: () => _this.canStart(),\n        onStart: () => _this.onStart(),\n        onMove: ev => _this.onMove(ev),\n        onEnd: () => _this.onEnd()\n      });\n\n      _this.disabledChanged();\n    })();\n  }\n\n  disconnectedCallback() {\n    this.scrollEl = undefined;\n\n    if (this.gesture) {\n      this.gesture.destroy();\n      this.gesture = undefined;\n    }\n  }\n  /**\n   * Call `complete()` when your async operation has completed.\n   * For example, the `refreshing` state is while the app is performing\n   * an asynchronous operation, such as receiving more data from an\n   * AJAX request. Once the data has been received, you then call this\n   * method to signify that the refreshing has completed and to close\n   * the refresher. This method also changes the refresher's state from\n   * `refreshing` to `completing`.\n   */\n\n\n  complete() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.close(32\n      /* Completing */\n      , '120ms');\n    })();\n  }\n  /**\n   * Changes the refresher's state from `refreshing` to `cancelling`.\n   */\n\n\n  cancel() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      _this3.close(16\n      /* Cancelling */\n      , '');\n    })();\n  }\n  /**\n   * A number representing how far down the user has pulled.\n   * The number `0` represents the user hasn't pulled down at all. The\n   * number `1`, and anything greater than `1`, represents that the user\n   * has pulled far enough down that when they let go then the refresh will\n   * happen. If they let go and the number is less than `1`, then the\n   * refresh will not happen, and the content will return to it's original\n   * position.\n   */\n\n\n  getProgress() {\n    return Promise.resolve(this.progress);\n  }\n\n  canStart() {\n    if (!this.scrollEl) {\n      return false;\n    }\n\n    if (this.state !== 1\n    /* Inactive */\n    ) {\n      return false;\n    } // if the scrollTop is greater than zero then it's\n    // not possible to pull the content down yet\n\n\n    if (this.scrollEl.scrollTop > 0) {\n      return false;\n    }\n\n    return true;\n  }\n\n  onStart() {\n    this.progress = 0;\n    this.state = 1\n    /* Inactive */\n    ;\n  }\n\n  onMove(detail) {\n    if (!this.scrollEl) {\n      return;\n    } // this method can get called like a bazillion times per second,\n    // so it's built to be as efficient as possible, and does its\n    // best to do any DOM read/writes only when absolutely necessary\n    // if multi-touch then get out immediately\n\n\n    const ev = detail.event;\n\n    if (ev.touches && ev.touches.length > 1) {\n      return;\n    } // do nothing if it's actively refreshing\n    // or it's in the way of closing\n    // or this was never a startY\n\n\n    if ((this.state & 56\n    /* _BUSY_ */\n    ) !== 0) {\n      return;\n    }\n\n    const pullFactor = Number.isNaN(this.pullFactor) || this.pullFactor < 0 ? 1 : this.pullFactor;\n    const deltaY = detail.deltaY * pullFactor; // don't bother if they're scrolling up\n    // and have not already started dragging\n\n    if (deltaY <= 0) {\n      // the current Y is higher than the starting Y\n      // so they scrolled up enough to be ignored\n      this.progress = 0;\n      this.state = 1\n      /* Inactive */\n      ;\n\n      if (this.appliedStyles) {\n        // reset the styles only if they were applied\n        this.setCss(0, '', false, '');\n        return;\n      }\n\n      return;\n    }\n\n    if (this.state === 1\n    /* Inactive */\n    ) {\n      // this refresh is not already actively pulling down\n      // get the content's scrollTop\n      const scrollHostScrollTop = this.scrollEl.scrollTop; // if the scrollTop is greater than zero then it's\n      // not possible to pull the content down yet\n\n      if (scrollHostScrollTop > 0) {\n        this.progress = 0;\n        return;\n      } // content scrolled all the way to the top, and dragging down\n\n\n      this.state = 2\n      /* Pulling */\n      ;\n    } // prevent native scroll events\n\n\n    if (ev.cancelable) {\n      ev.preventDefault();\n    } // the refresher is actively pulling at this point\n    // move the scroll element within the content element\n\n\n    this.setCss(deltaY, '0ms', true, '');\n\n    if (deltaY === 0) {\n      // don't continue if there's no delta yet\n      this.progress = 0;\n      return;\n    }\n\n    const pullMin = this.pullMin; // set pull progress\n\n    this.progress = deltaY / pullMin; // emit \"start\" if it hasn't started yet\n\n    if (!this.didStart) {\n      this.didStart = true;\n      this.ionStart.emit();\n    } // emit \"pulling\" on every move\n\n\n    this.ionPull.emit(); // do nothing if the delta is less than the pull threshold\n\n    if (deltaY < pullMin) {\n      // ensure it stays in the pulling state, cuz its not ready yet\n      this.state = 2\n      /* Pulling */\n      ;\n      return;\n    }\n\n    if (deltaY > this.pullMax) {\n      // they pulled farther than the max, so kick off the refresh\n      this.beginRefresh();\n      return;\n    } // pulled farther than the pull min!!\n    // it is now in the `ready` state!!\n    // if they let go then it'll refresh, kerpow!!\n\n\n    this.state = 4\n    /* Ready */\n    ;\n    return;\n  }\n\n  onEnd() {\n    // only run in a zone when absolutely necessary\n    if (this.state === 4\n    /* Ready */\n    ) {\n      // they pulled down far enough, so it's ready to refresh\n      this.beginRefresh();\n    } else if (this.state === 2\n    /* Pulling */\n    ) {\n      // they were pulling down, but didn't pull down far enough\n      // set the content back to it's original location\n      // and close the refresher\n      // set that the refresh is actively cancelling\n      this.cancel();\n    }\n  }\n\n  beginRefresh() {\n    // assumes we're already back in a zone\n    // they pulled down far enough, so it's ready to refresh\n    this.state = 8\n    /* Refreshing */\n    ; // place the content in a hangout position while it thinks\n\n    this.setCss(this.pullMin, this.snapbackDuration, true, ''); // emit \"refresh\" because it was pulled down far enough\n    // and they let go to begin refreshing\n\n    this.ionRefresh.emit({\n      complete: this.complete.bind(this)\n    });\n  }\n\n  close(state, delay) {\n    // create fallback timer incase something goes wrong with transitionEnd event\n    setTimeout(() => {\n      this.state = 1\n      /* Inactive */\n      ;\n      this.progress = 0;\n      this.didStart = false;\n      this.setCss(0, '0ms', false, '');\n    }, 600); // reset set the styles on the scroll element\n    // set that the refresh is actively cancelling/completing\n\n    this.state = state;\n    this.setCss(0, this.closeDuration, true, delay); // TODO: stop gesture\n  }\n\n  setCss(y, duration, overflowVisible, delay) {\n    this.appliedStyles = y > 0;\n    writeTask(() => {\n      if (this.scrollEl) {\n        const style = this.scrollEl.style;\n        style.transform = y > 0 ? `translateY(${y}px) translateZ(0px)` : 'translateZ(0px)';\n        style.transitionDuration = duration;\n        style.transitionDelay = delay;\n        style.overflow = overflowVisible ? 'hidden' : '';\n      }\n    });\n  }\n\n  render() {\n    const mode = getIonMode(this);\n    return h(Host, {\n      slot: \"fixed\",\n      class: {\n        [mode]: true,\n        // Used internally for styling\n        [`refresher-${mode}`]: true,\n        'refresher-active': this.state !== 1\n        /* Inactive */\n        ,\n        'refresher-pulling': this.state === 2\n        /* Pulling */\n        ,\n        'refresher-ready': this.state === 4\n        /* Ready */\n        ,\n        'refresher-refreshing': this.state === 8\n        /* Refreshing */\n        ,\n        'refresher-cancelling': this.state === 16\n        /* Cancelling */\n        ,\n        'refresher-completing': this.state === 32\n        /* Completing */\n\n      }\n    });\n  }\n\n  get el() {\n    return getElement(this);\n  }\n\n  static get watchers() {\n    return {\n      \"disabled\": [\"disabledChanged\"]\n    };\n  }\n\n  static get style() {\n    return \"ion-refresher{left:0;top:0;display:none;position:absolute;width:100%;height:60px;z-index:-1}:host-context([dir=rtl]) ion-refresher,[dir=rtl] ion-refresher{left:unset;right:unset;right:0}ion-refresher.refresher-active{display:block}ion-refresher-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;height:100%}.refresher-pulling,.refresher-refreshing{display:none;width:100%}.refresher-pulling-icon,.refresher-refreshing-icon{-webkit-transform-origin:center;transform-origin:center;-webkit-transition:.2s;transition:.2s;font-size:30px;text-align:center}:host-context([dir=rtl]) .refresher-pulling-icon,:host-context([dir=rtl]) .refresher-refreshing-icon,[dir=rtl] .refresher-pulling-icon,[dir=rtl] .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}.refresher-pulling-text,.refresher-refreshing-text{font-size:16px;text-align:center}.refresher-pulling ion-refresher-content .refresher-pulling,.refresher-ready ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling-icon{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.refresher-cancelling ion-refresher-content .refresher-pulling,.refresher-refreshing ion-refresher-content .refresher-refreshing{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-completing ion-refresher-content .refresher-refreshing{display:block}.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-md .refresher-pulling-icon,.refresher-md .refresher-pulling-text,.refresher-md .refresher-refreshing-icon,.refresher-md .refresher-refreshing-text{color:var(--ion-text-color,#000)}.refresher-md .refresher-refreshing .spinner-crescent circle,.refresher-md .refresher-refreshing .spinner-lines-md line,.refresher-md .refresher-refreshing .spinner-lines-small-md line{stroke:var(--ion-text-color,#000)}.refresher-md .refresher-refreshing .spinner-bubbles circle,.refresher-md .refresher-refreshing .spinner-circles circle,.refresher-md .refresher-refreshing .spinner-dots circle{fill:var(--ion-text-color,#000)}\";\n  }\n\n};\nconst RefresherContent = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n\n  componentWillLoad() {\n    if (this.pullingIcon === undefined) {\n      this.pullingIcon = config.get('refreshingIcon', 'arrow-down');\n    }\n\n    if (this.refreshingSpinner === undefined) {\n      const mode = getIonMode(this);\n      this.refreshingSpinner = config.get('refreshingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\n    }\n  }\n\n  render() {\n    return h(Host, {\n      class: getIonMode(this)\n    }, h(\"div\", {\n      class: \"refresher-pulling\"\n    }, this.pullingIcon && h(\"div\", {\n      class: \"refresher-pulling-icon\"\n    }, h(\"ion-icon\", {\n      icon: this.pullingIcon,\n      lazy: false\n    })), this.pullingText && h(\"div\", {\n      class: \"refresher-pulling-text\",\n      innerHTML: sanitizeDOMString(this.pullingText)\n    })), h(\"div\", {\n      class: \"refresher-refreshing\"\n    }, this.refreshingSpinner && h(\"div\", {\n      class: \"refresher-refreshing-icon\"\n    }, h(\"ion-spinner\", {\n      name: this.refreshingSpinner\n    })), this.refreshingText && h(\"div\", {\n      class: \"refresher-refreshing-text\",\n      innerHTML: sanitizeDOMString(this.refreshingText)\n    })));\n  }\n\n};\nexport { Refresher as ion_refresher, RefresherContent as ion_refresher_content };","map":{"version":3,"sources":["/home/ivan/HACKUPC2022/Join/node_modules/ionic-mqtt/node_modules/@ionic/core/dist/esm/ion-refresher_2-md.entry.js"],"names":["r","registerInstance","d","createEvent","w","writeTask","c","getIonMode","h","e","getElement","H","Host","b","config","s","sanitizeDOMString","Refresher","constructor","hostRef","appliedStyles","didStart","progress","state","pullMin","pullMax","closeDuration","snapbackDuration","pullFactor","disabled","ionRefresh","ionPull","ionStart","disabledChanged","gesture","setDisabled","connectedCallback","el","getAttribute","console","error","contentEl","closest","scrollEl","getScrollElement","createGesture","gestureName","gesturePriority","direction","threshold","passive","canStart","onStart","onMove","ev","onEnd","disconnectedCallback","undefined","destroy","complete","close","cancel","getProgress","Promise","resolve","scrollTop","detail","event","touches","length","Number","isNaN","deltaY","setCss","scrollHostScrollTop","cancelable","preventDefault","emit","beginRefresh","bind","delay","setTimeout","y","duration","overflowVisible","style","transform","transitionDuration","transitionDelay","overflow","render","mode","slot","class","watchers","RefresherContent","componentWillLoad","pullingIcon","get","refreshingSpinner","icon","lazy","pullingText","innerHTML","name","refreshingText","ion_refresher","ion_refresher_content"],"mappings":"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","sourcesContent":["import { r as registerInstance, d as createEvent, w as writeTask, c as getIonMode, h, e as getElement, H as Host } from './core-feeeff0d.js';\nimport { b as config } from './config-3c7f3790.js';\nimport { s as sanitizeDOMString } from './index-3476b023.js';\n\nconst Refresher = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.appliedStyles = false;\n        this.didStart = false;\n        this.progress = 0;\n        /**\n         * The current state which the refresher is in. The refresher's states include:\n         *\n         * - `inactive` - The refresher is not being pulled down or refreshing and is currently hidden.\n         * - `pulling` - The user is actively pulling down the refresher, but has not reached the point yet that if the user lets go, it'll refresh.\n         * - `cancelling` - The user pulled down the refresher and let go, but did not pull down far enough to kick off the `refreshing` state. After letting go, the refresher is in the `cancelling` state while it is closing, and will go back to the `inactive` state once closed.\n         * - `ready` - The user has pulled down the refresher far enough that if they let go, it'll begin the `refreshing` state.\n         * - `refreshing` - The refresher is actively waiting on the async operation to end. Once the refresh handler calls `complete()` it will begin the `completing` state.\n         * - `completing` - The `refreshing` state has finished and the refresher is in the way of closing itself. Once closed, the refresher will go back to the `inactive` state.\n         */\n        this.state = 1 /* Inactive */;\n        /**\n         * The minimum distance the user must pull down until the\n         * refresher will go into the `refreshing` state.\n         */\n        this.pullMin = 60;\n        /**\n         * The maximum distance of the pull until the refresher\n         * will automatically go into the `refreshing` state.\n         * Defaults to the result of `pullMin + 60`.\n         */\n        this.pullMax = this.pullMin + 60;\n        /**\n         * Time it takes to close the refresher.\n         */\n        this.closeDuration = '280ms';\n        /**\n         * Time it takes the refresher to to snap back to the `refreshing` state.\n         */\n        this.snapbackDuration = '280ms';\n        /**\n         * How much to multiply the pull speed by. To slow the pull animation down,\n         * pass a number less than `1`. To speed up the pull, pass a number greater\n         * than `1`. The default value is `1` which is equal to the speed of the cursor.\n         * If a negative value is passed in, the factor will be `1` instead.\n         *\n         * For example: If the value passed is `1.2` and the content is dragged by\n         * `10` pixels, instead of `10` pixels the content will be pulled by `12` pixels\n         * (an increase of 20 percent). If the value passed is `0.8`, the dragged amount\n         * will be `8` pixels, less than the amount the cursor has moved.\n         */\n        this.pullFactor = 1;\n        /**\n         * If `true`, the refresher will be hidden.\n         */\n        this.disabled = false;\n        this.ionRefresh = createEvent(this, \"ionRefresh\", 7);\n        this.ionPull = createEvent(this, \"ionPull\", 7);\n        this.ionStart = createEvent(this, \"ionStart\", 7);\n    }\n    disabledChanged() {\n        if (this.gesture) {\n            this.gesture.setDisabled(this.disabled);\n        }\n    }\n    async connectedCallback() {\n        if (this.el.getAttribute('slot') !== 'fixed') {\n            console.error('Make sure you use: <ion-refresher slot=\"fixed\">');\n            return;\n        }\n        const contentEl = this.el.closest('ion-content');\n        if (!contentEl) {\n            console.error('<ion-refresher> must be used inside an <ion-content>');\n            return;\n        }\n        this.scrollEl = await contentEl.getScrollElement();\n        this.gesture = (await import('./index-624eea58.js')).createGesture({\n            el: contentEl,\n            gestureName: 'refresher',\n            gesturePriority: 10,\n            direction: 'y',\n            threshold: 20,\n            passive: false,\n            canStart: () => this.canStart(),\n            onStart: () => this.onStart(),\n            onMove: ev => this.onMove(ev),\n            onEnd: () => this.onEnd(),\n        });\n        this.disabledChanged();\n    }\n    disconnectedCallback() {\n        this.scrollEl = undefined;\n        if (this.gesture) {\n            this.gesture.destroy();\n            this.gesture = undefined;\n        }\n    }\n    /**\n     * Call `complete()` when your async operation has completed.\n     * For example, the `refreshing` state is while the app is performing\n     * an asynchronous operation, such as receiving more data from an\n     * AJAX request. Once the data has been received, you then call this\n     * method to signify that the refreshing has completed and to close\n     * the refresher. This method also changes the refresher's state from\n     * `refreshing` to `completing`.\n     */\n    async complete() {\n        this.close(32 /* Completing */, '120ms');\n    }\n    /**\n     * Changes the refresher's state from `refreshing` to `cancelling`.\n     */\n    async cancel() {\n        this.close(16 /* Cancelling */, '');\n    }\n    /**\n     * A number representing how far down the user has pulled.\n     * The number `0` represents the user hasn't pulled down at all. The\n     * number `1`, and anything greater than `1`, represents that the user\n     * has pulled far enough down that when they let go then the refresh will\n     * happen. If they let go and the number is less than `1`, then the\n     * refresh will not happen, and the content will return to it's original\n     * position.\n     */\n    getProgress() {\n        return Promise.resolve(this.progress);\n    }\n    canStart() {\n        if (!this.scrollEl) {\n            return false;\n        }\n        if (this.state !== 1 /* Inactive */) {\n            return false;\n        }\n        // if the scrollTop is greater than zero then it's\n        // not possible to pull the content down yet\n        if (this.scrollEl.scrollTop > 0) {\n            return false;\n        }\n        return true;\n    }\n    onStart() {\n        this.progress = 0;\n        this.state = 1 /* Inactive */;\n    }\n    onMove(detail) {\n        if (!this.scrollEl) {\n            return;\n        }\n        // this method can get called like a bazillion times per second,\n        // so it's built to be as efficient as possible, and does its\n        // best to do any DOM read/writes only when absolutely necessary\n        // if multi-touch then get out immediately\n        const ev = detail.event;\n        if (ev.touches && ev.touches.length > 1) {\n            return;\n        }\n        // do nothing if it's actively refreshing\n        // or it's in the way of closing\n        // or this was never a startY\n        if ((this.state & 56 /* _BUSY_ */) !== 0) {\n            return;\n        }\n        const pullFactor = (Number.isNaN(this.pullFactor) || this.pullFactor < 0) ? 1 : this.pullFactor;\n        const deltaY = detail.deltaY * pullFactor;\n        // don't bother if they're scrolling up\n        // and have not already started dragging\n        if (deltaY <= 0) {\n            // the current Y is higher than the starting Y\n            // so they scrolled up enough to be ignored\n            this.progress = 0;\n            this.state = 1 /* Inactive */;\n            if (this.appliedStyles) {\n                // reset the styles only if they were applied\n                this.setCss(0, '', false, '');\n                return;\n            }\n            return;\n        }\n        if (this.state === 1 /* Inactive */) {\n            // this refresh is not already actively pulling down\n            // get the content's scrollTop\n            const scrollHostScrollTop = this.scrollEl.scrollTop;\n            // if the scrollTop is greater than zero then it's\n            // not possible to pull the content down yet\n            if (scrollHostScrollTop > 0) {\n                this.progress = 0;\n                return;\n            }\n            // content scrolled all the way to the top, and dragging down\n            this.state = 2 /* Pulling */;\n        }\n        // prevent native scroll events\n        if (ev.cancelable) {\n            ev.preventDefault();\n        }\n        // the refresher is actively pulling at this point\n        // move the scroll element within the content element\n        this.setCss(deltaY, '0ms', true, '');\n        if (deltaY === 0) {\n            // don't continue if there's no delta yet\n            this.progress = 0;\n            return;\n        }\n        const pullMin = this.pullMin;\n        // set pull progress\n        this.progress = deltaY / pullMin;\n        // emit \"start\" if it hasn't started yet\n        if (!this.didStart) {\n            this.didStart = true;\n            this.ionStart.emit();\n        }\n        // emit \"pulling\" on every move\n        this.ionPull.emit();\n        // do nothing if the delta is less than the pull threshold\n        if (deltaY < pullMin) {\n            // ensure it stays in the pulling state, cuz its not ready yet\n            this.state = 2 /* Pulling */;\n            return;\n        }\n        if (deltaY > this.pullMax) {\n            // they pulled farther than the max, so kick off the refresh\n            this.beginRefresh();\n            return;\n        }\n        // pulled farther than the pull min!!\n        // it is now in the `ready` state!!\n        // if they let go then it'll refresh, kerpow!!\n        this.state = 4 /* Ready */;\n        return;\n    }\n    onEnd() {\n        // only run in a zone when absolutely necessary\n        if (this.state === 4 /* Ready */) {\n            // they pulled down far enough, so it's ready to refresh\n            this.beginRefresh();\n        }\n        else if (this.state === 2 /* Pulling */) {\n            // they were pulling down, but didn't pull down far enough\n            // set the content back to it's original location\n            // and close the refresher\n            // set that the refresh is actively cancelling\n            this.cancel();\n        }\n    }\n    beginRefresh() {\n        // assumes we're already back in a zone\n        // they pulled down far enough, so it's ready to refresh\n        this.state = 8 /* Refreshing */;\n        // place the content in a hangout position while it thinks\n        this.setCss(this.pullMin, this.snapbackDuration, true, '');\n        // emit \"refresh\" because it was pulled down far enough\n        // and they let go to begin refreshing\n        this.ionRefresh.emit({\n            complete: this.complete.bind(this)\n        });\n    }\n    close(state, delay) {\n        // create fallback timer incase something goes wrong with transitionEnd event\n        setTimeout(() => {\n            this.state = 1 /* Inactive */;\n            this.progress = 0;\n            this.didStart = false;\n            this.setCss(0, '0ms', false, '');\n        }, 600);\n        // reset set the styles on the scroll element\n        // set that the refresh is actively cancelling/completing\n        this.state = state;\n        this.setCss(0, this.closeDuration, true, delay);\n        // TODO: stop gesture\n    }\n    setCss(y, duration, overflowVisible, delay) {\n        this.appliedStyles = (y > 0);\n        writeTask(() => {\n            if (this.scrollEl) {\n                const style = this.scrollEl.style;\n                style.transform = ((y > 0) ? `translateY(${y}px) translateZ(0px)` : 'translateZ(0px)');\n                style.transitionDuration = duration;\n                style.transitionDelay = delay;\n                style.overflow = (overflowVisible ? 'hidden' : '');\n            }\n        });\n    }\n    render() {\n        const mode = getIonMode(this);\n        return (h(Host, { slot: \"fixed\", class: {\n                [mode]: true,\n                // Used internally for styling\n                [`refresher-${mode}`]: true,\n                'refresher-active': this.state !== 1 /* Inactive */,\n                'refresher-pulling': this.state === 2 /* Pulling */,\n                'refresher-ready': this.state === 4 /* Ready */,\n                'refresher-refreshing': this.state === 8 /* Refreshing */,\n                'refresher-cancelling': this.state === 16 /* Cancelling */,\n                'refresher-completing': this.state === 32 /* Completing */\n            } }));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"disabled\": [\"disabledChanged\"]\n    }; }\n    static get style() { return \"ion-refresher{left:0;top:0;display:none;position:absolute;width:100%;height:60px;z-index:-1}:host-context([dir=rtl]) ion-refresher,[dir=rtl] ion-refresher{left:unset;right:unset;right:0}ion-refresher.refresher-active{display:block}ion-refresher-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;height:100%}.refresher-pulling,.refresher-refreshing{display:none;width:100%}.refresher-pulling-icon,.refresher-refreshing-icon{-webkit-transform-origin:center;transform-origin:center;-webkit-transition:.2s;transition:.2s;font-size:30px;text-align:center}:host-context([dir=rtl]) .refresher-pulling-icon,:host-context([dir=rtl]) .refresher-refreshing-icon,[dir=rtl] .refresher-pulling-icon,[dir=rtl] .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}.refresher-pulling-text,.refresher-refreshing-text{font-size:16px;text-align:center}.refresher-pulling ion-refresher-content .refresher-pulling,.refresher-ready ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling-icon{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.refresher-cancelling ion-refresher-content .refresher-pulling,.refresher-refreshing ion-refresher-content .refresher-refreshing{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-completing ion-refresher-content .refresher-refreshing{display:block}.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-md .refresher-pulling-icon,.refresher-md .refresher-pulling-text,.refresher-md .refresher-refreshing-icon,.refresher-md .refresher-refreshing-text{color:var(--ion-text-color,#000)}.refresher-md .refresher-refreshing .spinner-crescent circle,.refresher-md .refresher-refreshing .spinner-lines-md line,.refresher-md .refresher-refreshing .spinner-lines-small-md line{stroke:var(--ion-text-color,#000)}.refresher-md .refresher-refreshing .spinner-bubbles circle,.refresher-md .refresher-refreshing .spinner-circles circle,.refresher-md .refresher-refreshing .spinner-dots circle{fill:var(--ion-text-color,#000)}\"; }\n};\n\nconst RefresherContent = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    componentWillLoad() {\n        if (this.pullingIcon === undefined) {\n            this.pullingIcon = config.get('refreshingIcon', 'arrow-down');\n        }\n        if (this.refreshingSpinner === undefined) {\n            const mode = getIonMode(this);\n            this.refreshingSpinner = config.get('refreshingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\n        }\n    }\n    render() {\n        return (h(Host, { class: getIonMode(this) }, h(\"div\", { class: \"refresher-pulling\" }, this.pullingIcon &&\n            h(\"div\", { class: \"refresher-pulling-icon\" }, h(\"ion-icon\", { icon: this.pullingIcon, lazy: false })), this.pullingText &&\n            h(\"div\", { class: \"refresher-pulling-text\", innerHTML: sanitizeDOMString(this.pullingText) })), h(\"div\", { class: \"refresher-refreshing\" }, this.refreshingSpinner &&\n            h(\"div\", { class: \"refresher-refreshing-icon\" }, h(\"ion-spinner\", { name: this.refreshingSpinner })), this.refreshingText &&\n            h(\"div\", { class: \"refresher-refreshing-text\", innerHTML: sanitizeDOMString(this.refreshingText) }))));\n    }\n};\n\nexport { Refresher as ion_refresher, RefresherContent as ion_refresher_content };\n"]},"metadata":{},"sourceType":"module"}
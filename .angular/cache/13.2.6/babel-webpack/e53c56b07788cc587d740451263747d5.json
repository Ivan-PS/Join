{"ast":null,"code":"import _asyncToGenerator from \"/home/ivan/HACKUPC2022/Join/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { r as registerInstance, d as createEvent, w as writeTask, f as readTask, c as getIonMode, h, e as getElement, H as Host } from './core-feeeff0d.js';\nimport { b as config } from './config-3c7f3790.js';\nimport { s as sanitizeDOMString } from './index-3476b023.js';\nconst InfiniteScroll = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.thrPx = 0;\n    this.thrPc = 0;\n    this.didFire = false;\n    this.isBusy = false;\n    this.isLoading = false;\n    /**\n     * The threshold distance from the bottom\n     * of the content to call the `infinite` output event when scrolled.\n     * The threshold value can be either a percent, or\n     * in pixels. For example, use the value of `10%` for the `infinite`\n     * output event to get called when the user has scrolled 10%\n     * from the bottom of the page. Use the value `100px` when the\n     * scroll is within 100 pixels from the bottom of the page.\n     */\n\n    this.threshold = '15%';\n    /**\n     * If `true`, the infinite scroll will be hidden and scroll event listeners\n     * will be removed.\n     *\n     * Set this to true to disable the infinite scroll from actively\n     * trying to receive new data while scrolling. This is useful\n     * when it is known that there is no more data that can be added, and\n     * the infinite scroll is no longer needed.\n     */\n\n    this.disabled = false;\n    /**\n     * The position of the infinite scroll element.\n     * The value can be either `top` or `bottom`.\n     */\n\n    this.position = 'bottom';\n\n    this.onScroll = () => {\n      const scrollEl = this.scrollEl;\n\n      if (!scrollEl || !this.canStart()) {\n        return 1;\n      }\n\n      const infiniteHeight = this.el.offsetHeight;\n\n      if (infiniteHeight === 0) {\n        // if there is no height of this element then do nothing\n        return 2;\n      }\n\n      const scrollTop = scrollEl.scrollTop;\n      const scrollHeight = scrollEl.scrollHeight;\n      const height = scrollEl.offsetHeight;\n      const threshold = this.thrPc !== 0 ? height * this.thrPc : this.thrPx;\n      const distanceFromInfinite = this.position === 'bottom' ? scrollHeight - infiniteHeight - scrollTop - threshold - height : scrollTop - infiniteHeight - threshold;\n\n      if (distanceFromInfinite < 0) {\n        if (!this.didFire) {\n          this.isLoading = true;\n          this.didFire = true;\n          this.ionInfinite.emit();\n          return 3;\n        }\n      } else {\n        this.didFire = false;\n      }\n\n      return 4;\n    };\n\n    this.ionInfinite = createEvent(this, \"ionInfinite\", 7);\n  }\n\n  thresholdChanged() {\n    const val = this.threshold;\n\n    if (val.lastIndexOf('%') > -1) {\n      this.thrPx = 0;\n      this.thrPc = parseFloat(val) / 100;\n    } else {\n      this.thrPx = parseFloat(val);\n      this.thrPc = 0;\n    }\n  }\n\n  disabledChanged() {\n    const disabled = this.disabled;\n\n    if (disabled) {\n      this.isLoading = false;\n      this.isBusy = false;\n    }\n\n    this.enableScrollEvents(!disabled);\n  }\n\n  connectedCallback() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const contentEl = _this.el.closest('ion-content');\n\n      if (!contentEl) {\n        console.error('<ion-infinite-scroll> must be used inside an <ion-content>');\n        return;\n      }\n\n      _this.scrollEl = yield contentEl.getScrollElement();\n\n      _this.thresholdChanged();\n\n      _this.disabledChanged();\n\n      if (_this.position === 'top') {\n        writeTask(() => {\n          if (_this.scrollEl) {\n            _this.scrollEl.scrollTop = _this.scrollEl.scrollHeight - _this.scrollEl.clientHeight;\n          }\n        });\n      }\n    })();\n  }\n\n  disconnectedCallback() {\n    this.enableScrollEvents(false);\n    this.scrollEl = undefined;\n  }\n  /**\n   * Call `complete()` within the `ionInfinite` output event handler when\n   * your async operation has completed. For example, the `loading`\n   * state is while the app is performing an asynchronous operation,\n   * such as receiving more data from an AJAX request to add more items\n   * to a data list. Once the data has been received and UI updated, you\n   * then call this method to signify that the loading has completed.\n   * This method will change the infinite scroll's state from `loading`\n   * to `enabled`.\n   */\n\n\n  complete() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const scrollEl = _this2.scrollEl;\n\n      if (!_this2.isLoading || !scrollEl) {\n        return;\n      }\n\n      _this2.isLoading = false;\n\n      if (_this2.position === 'top') {\n        /**\n         * New content is being added at the top, but the scrollTop position stays the same,\n         * which causes a scroll jump visually. This algorithm makes sure to prevent this.\n         * (Frame 1)\n         *    - complete() is called, but the UI hasn't had time to update yet.\n         *    - Save the current content dimensions.\n         *    - Wait for the next frame using _dom.read, so the UI will be updated.\n         * (Frame 2)\n         *    - Read the new content dimensions.\n         *    - Calculate the height difference and the new scroll position.\n         *    - Delay the scroll position change until other possible dom reads are done using _dom.write to be performant.\n         * (Still frame 2, if I'm correct)\n         *    - Change the scroll position (= visually maintain the scroll position).\n         *    - Change the state to re-enable the InfiniteScroll.\n         *    - This should be after changing the scroll position, or it could\n         *    cause the InfiniteScroll to be triggered again immediately.\n         * (Frame 3)\n         *    Done.\n         */\n        _this2.isBusy = true; // ******** DOM READ ****************\n        // Save the current content dimensions before the UI updates\n\n        const prev = scrollEl.scrollHeight - scrollEl.scrollTop; // ******** DOM READ ****************\n\n        requestAnimationFrame(() => {\n          readTask(() => {\n            // UI has updated, save the new content dimensions\n            const scrollHeight = scrollEl.scrollHeight; // New content was added on top, so the scroll position should be changed immediately to prevent it from jumping around\n\n            const newScrollTop = scrollHeight - prev; // ******** DOM WRITE ****************\n\n            requestAnimationFrame(() => {\n              writeTask(() => {\n                scrollEl.scrollTop = newScrollTop;\n                _this2.isBusy = false;\n              });\n            });\n          });\n        });\n      }\n    })();\n  }\n\n  canStart() {\n    return !this.disabled && !this.isBusy && !!this.scrollEl && !this.isLoading;\n  }\n\n  enableScrollEvents(shouldListen) {\n    if (this.scrollEl) {\n      if (shouldListen) {\n        this.scrollEl.addEventListener('scroll', this.onScroll);\n      } else {\n        this.scrollEl.removeEventListener('scroll', this.onScroll);\n      }\n    }\n  }\n\n  render() {\n    const mode = getIonMode(this);\n    const disabled = this.disabled;\n    return h(Host, {\n      class: {\n        [mode]: true,\n        'infinite-scroll-loading': this.isLoading,\n        'infinite-scroll-enabled': !disabled\n      }\n    });\n  }\n\n  get el() {\n    return getElement(this);\n  }\n\n  static get watchers() {\n    return {\n      \"threshold\": [\"thresholdChanged\"],\n      \"disabled\": [\"disabledChanged\"]\n    };\n  }\n\n  static get style() {\n    return \"ion-infinite-scroll{display:none;width:100%}.infinite-scroll-enabled{display:block}\";\n  }\n\n};\nconst InfiniteScrollContent = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n\n  componentDidLoad() {\n    if (this.loadingSpinner === undefined) {\n      const mode = getIonMode(this);\n      this.loadingSpinner = config.get('infiniteLoadingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\n    }\n  }\n\n  render() {\n    const mode = getIonMode(this);\n    return h(Host, {\n      class: {\n        [mode]: true,\n        // Used internally for styling\n        [`infinite-scroll-content-${mode}`]: true\n      }\n    }, h(\"div\", {\n      class: \"infinite-loading\"\n    }, this.loadingSpinner && h(\"div\", {\n      class: \"infinite-loading-spinner\"\n    }, h(\"ion-spinner\", {\n      name: this.loadingSpinner\n    })), this.loadingText && h(\"div\", {\n      class: \"infinite-loading-text\",\n      innerHTML: sanitizeDOMString(this.loadingText)\n    })));\n  }\n\n  static get style() {\n    return \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-ios .infinite-loading-text{color:var(--ion-color-step-600,#666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-crescent circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-small-ios line{stroke:var(--ion-color-step-600,#666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600,#666)}\";\n  }\n\n};\nexport { InfiniteScroll as ion_infinite_scroll, InfiniteScrollContent as ion_infinite_scroll_content };","map":{"version":3,"sources":["/home/ivan/HACKUPC2022/Join/node_modules/ionic-mqtt/node_modules/@ionic/core/dist/esm/ion-infinite-scroll_2-ios.entry.js"],"names":["r","registerInstance","d","createEvent","w","writeTask","f","readTask","c","getIonMode","h","e","getElement","H","Host","b","config","s","sanitizeDOMString","InfiniteScroll","constructor","hostRef","thrPx","thrPc","didFire","isBusy","isLoading","threshold","disabled","position","onScroll","scrollEl","canStart","infiniteHeight","el","offsetHeight","scrollTop","scrollHeight","height","distanceFromInfinite","ionInfinite","emit","thresholdChanged","val","lastIndexOf","parseFloat","disabledChanged","enableScrollEvents","connectedCallback","contentEl","closest","console","error","getScrollElement","clientHeight","disconnectedCallback","undefined","complete","prev","requestAnimationFrame","newScrollTop","shouldListen","addEventListener","removeEventListener","render","mode","class","watchers","style","InfiniteScrollContent","componentDidLoad","loadingSpinner","get","name","loadingText","innerHTML","ion_infinite_scroll","ion_infinite_scroll_content"],"mappings":";AAAA,SAASA,CAAC,IAAIC,gBAAd,EAAgCC,CAAC,IAAIC,WAArC,EAAkDC,CAAC,IAAIC,SAAvD,EAAkEC,CAAC,IAAIC,QAAvE,EAAiFC,CAAC,IAAIC,UAAtF,EAAkGC,CAAlG,EAAqGC,CAAC,IAAIC,UAA1G,EAAsHC,CAAC,IAAIC,IAA3H,QAAuI,oBAAvI;AACA,SAASC,CAAC,IAAIC,MAAd,QAA4B,sBAA5B;AACA,SAASC,CAAC,IAAIC,iBAAd,QAAuC,qBAAvC;AAEA,MAAMC,cAAc,GAAG,MAAM;AACzBC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjBpB,IAAAA,gBAAgB,CAAC,IAAD,EAAOoB,OAAP,CAAhB;AACA,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,OAAL,GAAe,KAAf;AACA,SAAKC,MAAL,GAAc,KAAd;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ,SAAKC,SAAL,GAAiB,KAAjB;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ,SAAKC,QAAL,GAAgB,KAAhB;AACA;AACR;AACA;AACA;;AACQ,SAAKC,QAAL,GAAgB,QAAhB;;AACA,SAAKC,QAAL,GAAgB,MAAM;AAClB,YAAMC,QAAQ,GAAG,KAAKA,QAAtB;;AACA,UAAI,CAACA,QAAD,IAAa,CAAC,KAAKC,QAAL,EAAlB,EAAmC;AAC/B,eAAO,CAAP;AACH;;AACD,YAAMC,cAAc,GAAG,KAAKC,EAAL,CAAQC,YAA/B;;AACA,UAAIF,cAAc,KAAK,CAAvB,EAA0B;AACtB;AACA,eAAO,CAAP;AACH;;AACD,YAAMG,SAAS,GAAGL,QAAQ,CAACK,SAA3B;AACA,YAAMC,YAAY,GAAGN,QAAQ,CAACM,YAA9B;AACA,YAAMC,MAAM,GAAGP,QAAQ,CAACI,YAAxB;AACA,YAAMR,SAAS,GAAG,KAAKJ,KAAL,KAAe,CAAf,GAAoBe,MAAM,GAAG,KAAKf,KAAlC,GAA2C,KAAKD,KAAlE;AACA,YAAMiB,oBAAoB,GAAI,KAAKV,QAAL,KAAkB,QAAnB,GACvBQ,YAAY,GAAGJ,cAAf,GAAgCG,SAAhC,GAA4CT,SAA5C,GAAwDW,MADjC,GAEvBF,SAAS,GAAGH,cAAZ,GAA6BN,SAFnC;;AAGA,UAAIY,oBAAoB,GAAG,CAA3B,EAA8B;AAC1B,YAAI,CAAC,KAAKf,OAAV,EAAmB;AACf,eAAKE,SAAL,GAAiB,IAAjB;AACA,eAAKF,OAAL,GAAe,IAAf;AACA,eAAKgB,WAAL,CAAiBC,IAAjB;AACA,iBAAO,CAAP;AACH;AACJ,OAPD,MAQK;AACD,aAAKjB,OAAL,GAAe,KAAf;AACH;;AACD,aAAO,CAAP;AACH,KA7BD;;AA8BA,SAAKgB,WAAL,GAAmBrC,WAAW,CAAC,IAAD,EAAO,aAAP,EAAsB,CAAtB,CAA9B;AACH;;AACDuC,EAAAA,gBAAgB,GAAG;AACf,UAAMC,GAAG,GAAG,KAAKhB,SAAjB;;AACA,QAAIgB,GAAG,CAACC,WAAJ,CAAgB,GAAhB,IAAuB,CAAC,CAA5B,EAA+B;AAC3B,WAAKtB,KAAL,GAAa,CAAb;AACA,WAAKC,KAAL,GAAcsB,UAAU,CAACF,GAAD,CAAV,GAAkB,GAAhC;AACH,KAHD,MAIK;AACD,WAAKrB,KAAL,GAAauB,UAAU,CAACF,GAAD,CAAvB;AACA,WAAKpB,KAAL,GAAa,CAAb;AACH;AACJ;;AACDuB,EAAAA,eAAe,GAAG;AACd,UAAMlB,QAAQ,GAAG,KAAKA,QAAtB;;AACA,QAAIA,QAAJ,EAAc;AACV,WAAKF,SAAL,GAAiB,KAAjB;AACA,WAAKD,MAAL,GAAc,KAAd;AACH;;AACD,SAAKsB,kBAAL,CAAwB,CAACnB,QAAzB;AACH;;AACKoB,EAAAA,iBAAiB,GAAG;AAAA;;AAAA;AACtB,YAAMC,SAAS,GAAG,KAAI,CAACf,EAAL,CAAQgB,OAAR,CAAgB,aAAhB,CAAlB;;AACA,UAAI,CAACD,SAAL,EAAgB;AACZE,QAAAA,OAAO,CAACC,KAAR,CAAc,4DAAd;AACA;AACH;;AACD,MAAA,KAAI,CAACrB,QAAL,SAAsBkB,SAAS,CAACI,gBAAV,EAAtB;;AACA,MAAA,KAAI,CAACX,gBAAL;;AACA,MAAA,KAAI,CAACI,eAAL;;AACA,UAAI,KAAI,CAACjB,QAAL,KAAkB,KAAtB,EAA6B;AACzBxB,QAAAA,SAAS,CAAC,MAAM;AACZ,cAAI,KAAI,CAAC0B,QAAT,EAAmB;AACf,YAAA,KAAI,CAACA,QAAL,CAAcK,SAAd,GAA0B,KAAI,CAACL,QAAL,CAAcM,YAAd,GAA6B,KAAI,CAACN,QAAL,CAAcuB,YAArE;AACH;AACJ,SAJQ,CAAT;AAKH;AAfqB;AAgBzB;;AACDC,EAAAA,oBAAoB,GAAG;AACnB,SAAKR,kBAAL,CAAwB,KAAxB;AACA,SAAKhB,QAAL,GAAgByB,SAAhB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACUC,EAAAA,QAAQ,GAAG;AAAA;;AAAA;AACb,YAAM1B,QAAQ,GAAG,MAAI,CAACA,QAAtB;;AACA,UAAI,CAAC,MAAI,CAACL,SAAN,IAAmB,CAACK,QAAxB,EAAkC;AAC9B;AACH;;AACD,MAAA,MAAI,CAACL,SAAL,GAAiB,KAAjB;;AACA,UAAI,MAAI,CAACG,QAAL,KAAkB,KAAtB,EAA6B;AACzB;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,QAAA,MAAI,CAACJ,MAAL,GAAc,IAAd,CApByB,CAqBzB;AACA;;AACA,cAAMiC,IAAI,GAAG3B,QAAQ,CAACM,YAAT,GAAwBN,QAAQ,CAACK,SAA9C,CAvByB,CAwBzB;;AACAuB,QAAAA,qBAAqB,CAAC,MAAM;AACxBpD,UAAAA,QAAQ,CAAC,MAAM;AACX;AACA,kBAAM8B,YAAY,GAAGN,QAAQ,CAACM,YAA9B,CAFW,CAGX;;AACA,kBAAMuB,YAAY,GAAGvB,YAAY,GAAGqB,IAApC,CAJW,CAKX;;AACAC,YAAAA,qBAAqB,CAAC,MAAM;AACxBtD,cAAAA,SAAS,CAAC,MAAM;AACZ0B,gBAAAA,QAAQ,CAACK,SAAT,GAAqBwB,YAArB;AACA,gBAAA,MAAI,CAACnC,MAAL,GAAc,KAAd;AACH,eAHQ,CAAT;AAIH,aALoB,CAArB;AAMH,WAZO,CAAR;AAaH,SAdoB,CAArB;AAeH;AA9CY;AA+ChB;;AACDO,EAAAA,QAAQ,GAAG;AACP,WAAQ,CAAC,KAAKJ,QAAN,IACJ,CAAC,KAAKH,MADF,IAEJ,CAAC,CAAC,KAAKM,QAFH,IAGJ,CAAC,KAAKL,SAHV;AAIH;;AACDqB,EAAAA,kBAAkB,CAACc,YAAD,EAAe;AAC7B,QAAI,KAAK9B,QAAT,EAAmB;AACf,UAAI8B,YAAJ,EAAkB;AACd,aAAK9B,QAAL,CAAc+B,gBAAd,CAA+B,QAA/B,EAAyC,KAAKhC,QAA9C;AACH,OAFD,MAGK;AACD,aAAKC,QAAL,CAAcgC,mBAAd,CAAkC,QAAlC,EAA4C,KAAKjC,QAAjD;AACH;AACJ;AACJ;;AACDkC,EAAAA,MAAM,GAAG;AACL,UAAMC,IAAI,GAAGxD,UAAU,CAAC,IAAD,CAAvB;AACA,UAAMmB,QAAQ,GAAG,KAAKA,QAAtB;AACA,WAAQlB,CAAC,CAACI,IAAD,EAAO;AAAEoD,MAAAA,KAAK,EAAE;AACjB,SAACD,IAAD,GAAQ,IADS;AAEjB,mCAA2B,KAAKvC,SAFf;AAGjB,mCAA2B,CAACE;AAHX;AAAT,KAAP,CAAT;AAKH;;AACK,MAAFM,EAAE,GAAG;AAAE,WAAOtB,UAAU,CAAC,IAAD,CAAjB;AAA0B;;AAClB,aAARuD,QAAQ,GAAG;AAAE,WAAO;AAC3B,mBAAa,CAAC,kBAAD,CADc;AAE3B,kBAAY,CAAC,iBAAD;AAFe,KAAP;AAGpB;;AACY,aAALC,KAAK,GAAG;AAAE,WAAO,qFAAP;AAA+F;;AAjM3F,CAA7B;AAoMA,MAAMC,qBAAqB,GAAG,MAAM;AAChCjD,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjBpB,IAAAA,gBAAgB,CAAC,IAAD,EAAOoB,OAAP,CAAhB;AACH;;AACDiD,EAAAA,gBAAgB,GAAG;AACf,QAAI,KAAKC,cAAL,KAAwBf,SAA5B,EAAuC;AACnC,YAAMS,IAAI,GAAGxD,UAAU,CAAC,IAAD,CAAvB;AACA,WAAK8D,cAAL,GAAsBvD,MAAM,CAACwD,GAAP,CAAW,wBAAX,EAAqCxD,MAAM,CAACwD,GAAP,CAAW,SAAX,EAAsBP,IAAI,KAAK,KAAT,GAAiB,OAAjB,GAA2B,UAAjD,CAArC,CAAtB;AACH;AACJ;;AACDD,EAAAA,MAAM,GAAG;AACL,UAAMC,IAAI,GAAGxD,UAAU,CAAC,IAAD,CAAvB;AACA,WAAQC,CAAC,CAACI,IAAD,EAAO;AAAEoD,MAAAA,KAAK,EAAE;AACjB,SAACD,IAAD,GAAQ,IADS;AAEjB;AACA,SAAE,2BAA0BA,IAAK,EAAjC,GAAqC;AAHpB;AAAT,KAAP,EAIAvD,CAAC,CAAC,KAAD,EAAQ;AAAEwD,MAAAA,KAAK,EAAE;AAAT,KAAR,EAAuC,KAAKK,cAAL,IAAwB7D,CAAC,CAAC,KAAD,EAAQ;AAAEwD,MAAAA,KAAK,EAAE;AAAT,KAAR,EAA+CxD,CAAC,CAAC,aAAD,EAAgB;AAAE+D,MAAAA,IAAI,EAAE,KAAKF;AAAb,KAAhB,CAAhD,CAAhE,EAAkK,KAAKG,WAAL,IAAqBhE,CAAC,CAAC,KAAD,EAAQ;AAAEwD,MAAAA,KAAK,EAAE,uBAAT;AAAkCS,MAAAA,SAAS,EAAEzD,iBAAiB,CAAC,KAAKwD,WAAN;AAA9D,KAAR,CAAxL,CAJD,CAAT;AAKH;;AACe,aAALN,KAAK,GAAG;AAAE,WAAO,o6CAAP;AAA86C;;AAlBn6C,CAApC;AAqBA,SAASjD,cAAc,IAAIyD,mBAA3B,EAAgDP,qBAAqB,IAAIQ,2BAAzE","sourcesContent":["import { r as registerInstance, d as createEvent, w as writeTask, f as readTask, c as getIonMode, h, e as getElement, H as Host } from './core-feeeff0d.js';\nimport { b as config } from './config-3c7f3790.js';\nimport { s as sanitizeDOMString } from './index-3476b023.js';\n\nconst InfiniteScroll = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.thrPx = 0;\n        this.thrPc = 0;\n        this.didFire = false;\n        this.isBusy = false;\n        this.isLoading = false;\n        /**\n         * The threshold distance from the bottom\n         * of the content to call the `infinite` output event when scrolled.\n         * The threshold value can be either a percent, or\n         * in pixels. For example, use the value of `10%` for the `infinite`\n         * output event to get called when the user has scrolled 10%\n         * from the bottom of the page. Use the value `100px` when the\n         * scroll is within 100 pixels from the bottom of the page.\n         */\n        this.threshold = '15%';\n        /**\n         * If `true`, the infinite scroll will be hidden and scroll event listeners\n         * will be removed.\n         *\n         * Set this to true to disable the infinite scroll from actively\n         * trying to receive new data while scrolling. This is useful\n         * when it is known that there is no more data that can be added, and\n         * the infinite scroll is no longer needed.\n         */\n        this.disabled = false;\n        /**\n         * The position of the infinite scroll element.\n         * The value can be either `top` or `bottom`.\n         */\n        this.position = 'bottom';\n        this.onScroll = () => {\n            const scrollEl = this.scrollEl;\n            if (!scrollEl || !this.canStart()) {\n                return 1;\n            }\n            const infiniteHeight = this.el.offsetHeight;\n            if (infiniteHeight === 0) {\n                // if there is no height of this element then do nothing\n                return 2;\n            }\n            const scrollTop = scrollEl.scrollTop;\n            const scrollHeight = scrollEl.scrollHeight;\n            const height = scrollEl.offsetHeight;\n            const threshold = this.thrPc !== 0 ? (height * this.thrPc) : this.thrPx;\n            const distanceFromInfinite = (this.position === 'bottom')\n                ? scrollHeight - infiniteHeight - scrollTop - threshold - height\n                : scrollTop - infiniteHeight - threshold;\n            if (distanceFromInfinite < 0) {\n                if (!this.didFire) {\n                    this.isLoading = true;\n                    this.didFire = true;\n                    this.ionInfinite.emit();\n                    return 3;\n                }\n            }\n            else {\n                this.didFire = false;\n            }\n            return 4;\n        };\n        this.ionInfinite = createEvent(this, \"ionInfinite\", 7);\n    }\n    thresholdChanged() {\n        const val = this.threshold;\n        if (val.lastIndexOf('%') > -1) {\n            this.thrPx = 0;\n            this.thrPc = (parseFloat(val) / 100);\n        }\n        else {\n            this.thrPx = parseFloat(val);\n            this.thrPc = 0;\n        }\n    }\n    disabledChanged() {\n        const disabled = this.disabled;\n        if (disabled) {\n            this.isLoading = false;\n            this.isBusy = false;\n        }\n        this.enableScrollEvents(!disabled);\n    }\n    async connectedCallback() {\n        const contentEl = this.el.closest('ion-content');\n        if (!contentEl) {\n            console.error('<ion-infinite-scroll> must be used inside an <ion-content>');\n            return;\n        }\n        this.scrollEl = await contentEl.getScrollElement();\n        this.thresholdChanged();\n        this.disabledChanged();\n        if (this.position === 'top') {\n            writeTask(() => {\n                if (this.scrollEl) {\n                    this.scrollEl.scrollTop = this.scrollEl.scrollHeight - this.scrollEl.clientHeight;\n                }\n            });\n        }\n    }\n    disconnectedCallback() {\n        this.enableScrollEvents(false);\n        this.scrollEl = undefined;\n    }\n    /**\n     * Call `complete()` within the `ionInfinite` output event handler when\n     * your async operation has completed. For example, the `loading`\n     * state is while the app is performing an asynchronous operation,\n     * such as receiving more data from an AJAX request to add more items\n     * to a data list. Once the data has been received and UI updated, you\n     * then call this method to signify that the loading has completed.\n     * This method will change the infinite scroll's state from `loading`\n     * to `enabled`.\n     */\n    async complete() {\n        const scrollEl = this.scrollEl;\n        if (!this.isLoading || !scrollEl) {\n            return;\n        }\n        this.isLoading = false;\n        if (this.position === 'top') {\n            /**\n             * New content is being added at the top, but the scrollTop position stays the same,\n             * which causes a scroll jump visually. This algorithm makes sure to prevent this.\n             * (Frame 1)\n             *    - complete() is called, but the UI hasn't had time to update yet.\n             *    - Save the current content dimensions.\n             *    - Wait for the next frame using _dom.read, so the UI will be updated.\n             * (Frame 2)\n             *    - Read the new content dimensions.\n             *    - Calculate the height difference and the new scroll position.\n             *    - Delay the scroll position change until other possible dom reads are done using _dom.write to be performant.\n             * (Still frame 2, if I'm correct)\n             *    - Change the scroll position (= visually maintain the scroll position).\n             *    - Change the state to re-enable the InfiniteScroll.\n             *    - This should be after changing the scroll position, or it could\n             *    cause the InfiniteScroll to be triggered again immediately.\n             * (Frame 3)\n             *    Done.\n             */\n            this.isBusy = true;\n            // ******** DOM READ ****************\n            // Save the current content dimensions before the UI updates\n            const prev = scrollEl.scrollHeight - scrollEl.scrollTop;\n            // ******** DOM READ ****************\n            requestAnimationFrame(() => {\n                readTask(() => {\n                    // UI has updated, save the new content dimensions\n                    const scrollHeight = scrollEl.scrollHeight;\n                    // New content was added on top, so the scroll position should be changed immediately to prevent it from jumping around\n                    const newScrollTop = scrollHeight - prev;\n                    // ******** DOM WRITE ****************\n                    requestAnimationFrame(() => {\n                        writeTask(() => {\n                            scrollEl.scrollTop = newScrollTop;\n                            this.isBusy = false;\n                        });\n                    });\n                });\n            });\n        }\n    }\n    canStart() {\n        return (!this.disabled &&\n            !this.isBusy &&\n            !!this.scrollEl &&\n            !this.isLoading);\n    }\n    enableScrollEvents(shouldListen) {\n        if (this.scrollEl) {\n            if (shouldListen) {\n                this.scrollEl.addEventListener('scroll', this.onScroll);\n            }\n            else {\n                this.scrollEl.removeEventListener('scroll', this.onScroll);\n            }\n        }\n    }\n    render() {\n        const mode = getIonMode(this);\n        const disabled = this.disabled;\n        return (h(Host, { class: {\n                [mode]: true,\n                'infinite-scroll-loading': this.isLoading,\n                'infinite-scroll-enabled': !disabled\n            } }));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"threshold\": [\"thresholdChanged\"],\n        \"disabled\": [\"disabledChanged\"]\n    }; }\n    static get style() { return \"ion-infinite-scroll{display:none;width:100%}.infinite-scroll-enabled{display:block}\"; }\n};\n\nconst InfiniteScrollContent = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    componentDidLoad() {\n        if (this.loadingSpinner === undefined) {\n            const mode = getIonMode(this);\n            this.loadingSpinner = config.get('infiniteLoadingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\n        }\n    }\n    render() {\n        const mode = getIonMode(this);\n        return (h(Host, { class: {\n                [mode]: true,\n                // Used internally for styling\n                [`infinite-scroll-content-${mode}`]: true\n            } }, h(\"div\", { class: \"infinite-loading\" }, this.loadingSpinner && (h(\"div\", { class: \"infinite-loading-spinner\" }, h(\"ion-spinner\", { name: this.loadingSpinner }))), this.loadingText && (h(\"div\", { class: \"infinite-loading-text\", innerHTML: sanitizeDOMString(this.loadingText) })))));\n    }\n    static get style() { return \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-ios .infinite-loading-text{color:var(--ion-color-step-600,#666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-crescent circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-small-ios line{stroke:var(--ion-color-step-600,#666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600,#666)}\"; }\n};\n\nexport { InfiniteScroll as ion_infinite_scroll, InfiniteScrollContent as ion_infinite_scroll_content };\n"]},"metadata":{},"sourceType":"module"}
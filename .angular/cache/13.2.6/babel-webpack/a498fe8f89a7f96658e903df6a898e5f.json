{"ast":null,"code":"import _asyncToGenerator from \"/home/ivan/HACKUPC2022/Join/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { r as registerInstance, d as createEvent, e as getElement, c as getIonMode, h, H as Host } from './core-feeeff0d.js';\nimport './config-3c7f3790.js';\nimport { e as debounce } from './helpers-46f4a262.js';\nimport { o as openURL, c as createColorClasses } from './theme-18cbe2cc.js';\nconst Route = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * Relative path that needs to match in order for this route to apply.\n     *\n     * Accepts paths similar to expressjs so that you can define parameters\n     * in the url /foo/:bar where bar would be available in incoming props.\n     */\n\n    this.url = '';\n    this.ionRouteDataChanged = createEvent(this, \"ionRouteDataChanged\", 7);\n  }\n\n  onUpdate(newValue) {\n    this.ionRouteDataChanged.emit(newValue);\n  }\n\n  onComponentProps(newValue, oldValue) {\n    if (newValue === oldValue) {\n      return;\n    }\n\n    const keys1 = newValue ? Object.keys(newValue) : [];\n    const keys2 = oldValue ? Object.keys(oldValue) : [];\n\n    if (keys1.length !== keys2.length) {\n      this.onUpdate(newValue);\n      return;\n    }\n\n    for (const key of keys1) {\n      if (newValue[key] !== oldValue[key]) {\n        this.onUpdate(newValue);\n        return;\n      }\n    }\n  }\n\n  connectedCallback() {\n    this.ionRouteDataChanged.emit();\n  }\n\n  static get watchers() {\n    return {\n      \"url\": [\"onUpdate\"],\n      \"component\": [\"onUpdate\"],\n      \"componentProps\": [\"onComponentProps\"]\n    };\n  }\n\n};\nconst RouteRedirect = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteRedirectChanged = createEvent(this, \"ionRouteRedirectChanged\", 7);\n  }\n\n  propDidChange() {\n    this.ionRouteRedirectChanged.emit();\n  }\n\n  connectedCallback() {\n    this.ionRouteRedirectChanged.emit();\n  }\n\n  static get watchers() {\n    return {\n      \"from\": [\"propDidChange\"],\n      \"to\": [\"propDidChange\"]\n    };\n  }\n\n};\nconst ROUTER_INTENT_NONE = 'root';\nconst ROUTER_INTENT_FORWARD = 'forward';\nconst ROUTER_INTENT_BACK = 'back';\n\nconst generatePath = segments => {\n  const path = segments.filter(s => s.length > 0).join('/');\n  return '/' + path;\n};\n\nconst chainToPath = chain => {\n  const path = [];\n\n  for (const route of chain) {\n    for (const segment of route.path) {\n      if (segment[0] === ':') {\n        const param = route.params && route.params[segment.slice(1)];\n\n        if (!param) {\n          return null;\n        }\n\n        path.push(param);\n      } else if (segment !== '') {\n        path.push(segment);\n      }\n    }\n  }\n\n  return path;\n};\n\nconst writePath = (history, root, useHash, path, direction, state) => {\n  let url = generatePath([...parsePath(root), ...path]);\n\n  if (useHash) {\n    url = '#' + url;\n  }\n\n  if (direction === ROUTER_INTENT_FORWARD) {\n    history.pushState(state, '', url);\n  } else {\n    history.replaceState(state, '', url);\n  }\n};\n\nconst removePrefix = (prefix, path) => {\n  if (prefix.length > path.length) {\n    return null;\n  }\n\n  if (prefix.length <= 1 && prefix[0] === '') {\n    return path;\n  }\n\n  for (let i = 0; i < prefix.length; i++) {\n    if (prefix[i].length > 0 && prefix[i] !== path[i]) {\n      return null;\n    }\n  }\n\n  if (path.length === prefix.length) {\n    return [''];\n  }\n\n  return path.slice(prefix.length);\n};\n\nconst readPath = (loc, root, useHash) => {\n  let pathname = loc.pathname;\n\n  if (useHash) {\n    const hash = loc.hash;\n    pathname = hash[0] === '#' ? hash.slice(1) : '';\n  }\n\n  const prefix = parsePath(root);\n  const path = parsePath(pathname);\n  return removePrefix(prefix, path);\n};\n\nconst parsePath = path => {\n  if (path == null) {\n    return [''];\n  }\n\n  const segments = path.split('/').map(s => s.trim()).filter(s => s.length > 0);\n\n  if (segments.length === 0) {\n    return [''];\n  } else {\n    return segments;\n  }\n};\n\nconst printRoutes = routes => {\n  console.group(`[ion-core] ROUTES[${routes.length}]`);\n\n  for (const chain of routes) {\n    const path = [];\n    chain.forEach(r => path.push(...r.path));\n    const ids = chain.map(r => r.id);\n    console.debug(`%c ${generatePath(path)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\n  }\n\n  console.groupEnd();\n};\n\nconst printRedirects = redirects => {\n  console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\n\n  for (const redirect of redirects) {\n    if (redirect.to) {\n      console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to)}`, 'font-weight: bold');\n    }\n  }\n\n  console.groupEnd();\n};\n\nconst writeNavState = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (root, chain, direction, index, changed = false) {\n    try {\n      // find next navigation outlet in the DOM\n      const outlet = searchNavNode(root); // make sure we can continue interacting the DOM, otherwise abort\n\n      if (index >= chain.length || !outlet) {\n        return changed;\n      }\n\n      yield outlet.componentOnReady();\n      const route = chain[index];\n      const result = yield outlet.setRouteId(route.id, route.params, direction); // if the outlet changed the page, reset navigation to neutral (no direction)\n      // this means nested outlets will not animate\n\n      if (result.changed) {\n        direction = ROUTER_INTENT_NONE;\n        changed = true;\n      } // recursively set nested outlets\n\n\n      changed = yield writeNavState(result.element, chain, direction, index + 1, changed); // once all nested outlets are visible let's make the parent visible too,\n      // using markVisible prevents flickering\n\n      if (result.markVisible) {\n        yield result.markVisible();\n      }\n\n      return changed;\n    } catch (e) {\n      console.error(e);\n      return false;\n    }\n  });\n\n  return function writeNavState(_x, _x2, _x3, _x4) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nconst readNavState = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (root) {\n    const ids = [];\n    let outlet;\n    let node = root; // tslint:disable-next-line:no-constant-condition\n\n    while (true) {\n      outlet = searchNavNode(node);\n\n      if (outlet) {\n        const id = yield outlet.getRouteId();\n\n        if (id) {\n          node = id.element;\n          id.element = undefined;\n          ids.push(id);\n        } else {\n          break;\n        }\n      } else {\n        break;\n      }\n    }\n\n    return {\n      ids,\n      outlet\n    };\n  });\n\n  return function readNavState(_x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nconst waitUntilNavNode = () => {\n  if (searchNavNode(document.body)) {\n    return Promise.resolve();\n  }\n\n  return new Promise(resolve => {\n    window.addEventListener('ionNavWillLoad', resolve, {\n      once: true\n    });\n  });\n};\n\nconst QUERY = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\n\nconst searchNavNode = root => {\n  if (!root) {\n    return undefined;\n  }\n\n  if (root.matches(QUERY)) {\n    return root;\n  }\n\n  const outlet = root.querySelector(QUERY);\n  return outlet ? outlet : undefined;\n};\n\nconst matchesRedirect = (input, route) => {\n  const {\n    from,\n    to\n  } = route;\n\n  if (to === undefined) {\n    return false;\n  }\n\n  if (from.length > input.length) {\n    return false;\n  }\n\n  for (let i = 0; i < from.length; i++) {\n    const expected = from[i];\n\n    if (expected === '*') {\n      return true;\n    }\n\n    if (expected !== input[i]) {\n      return false;\n    }\n  }\n\n  return from.length === input.length;\n};\n\nconst routeRedirect = (path, routes) => {\n  return routes.find(route => matchesRedirect(path, route));\n};\n\nconst matchesIDs = (ids, chain) => {\n  const len = Math.min(ids.length, chain.length);\n  let i = 0;\n\n  for (; i < len; i++) {\n    if (ids[i].toLowerCase() !== chain[i].id) {\n      break;\n    }\n  }\n\n  return i;\n};\n\nconst matchesPath = (inputPath, chain) => {\n  const segments = new RouterSegments(inputPath);\n  let matchesDefault = false;\n  let allparams;\n\n  for (let i = 0; i < chain.length; i++) {\n    const path = chain[i].path;\n\n    if (path[0] === '') {\n      matchesDefault = true;\n    } else {\n      for (const segment of path) {\n        const data = segments.next(); // data param\n\n        if (segment[0] === ':') {\n          if (data === '') {\n            return null;\n          }\n\n          allparams = allparams || [];\n          const params = allparams[i] || (allparams[i] = {});\n          params[segment.slice(1)] = data;\n        } else if (data !== segment) {\n          return null;\n        }\n      }\n\n      matchesDefault = false;\n    }\n  }\n\n  const matches = matchesDefault ? matchesDefault === (segments.next() === '') : true;\n\n  if (!matches) {\n    return null;\n  }\n\n  if (allparams) {\n    return chain.map((route, i) => ({\n      id: route.id,\n      path: route.path,\n      params: mergeParams(route.params, allparams[i])\n    }));\n  }\n\n  return chain;\n};\n\nconst mergeParams = (a, b) => {\n  if (!a && b) {\n    return b;\n  } else if (a && !b) {\n    return a;\n  } else if (a && b) {\n    return Object.assign(Object.assign({}, a), b);\n  }\n\n  return undefined;\n};\n\nconst routerIDsToChain = (ids, chains) => {\n  let match = null;\n  let maxMatches = 0;\n  const plainIDs = ids.map(i => i.id);\n\n  for (const chain of chains) {\n    const score = matchesIDs(plainIDs, chain);\n\n    if (score > maxMatches) {\n      match = chain;\n      maxMatches = score;\n    }\n  }\n\n  if (match) {\n    return match.map((route, i) => ({\n      id: route.id,\n      path: route.path,\n      params: mergeParams(route.params, ids[i] && ids[i].params)\n    }));\n  }\n\n  return null;\n};\n\nconst routerPathToChain = (path, chains) => {\n  let match = null;\n  let matches = 0;\n\n  for (const chain of chains) {\n    const matchedChain = matchesPath(path, chain);\n\n    if (matchedChain !== null) {\n      const score = computePriority(matchedChain);\n\n      if (score > matches) {\n        matches = score;\n        match = matchedChain;\n      }\n    }\n  }\n\n  return match;\n};\n\nconst computePriority = chain => {\n  let score = 1;\n  let level = 1;\n\n  for (const route of chain) {\n    for (const path of route.path) {\n      if (path[0] === ':') {\n        score += Math.pow(1, level);\n      } else if (path !== '') {\n        score += Math.pow(2, level);\n      }\n\n      level++;\n    }\n  }\n\n  return score;\n};\n\nclass RouterSegments {\n  constructor(path) {\n    this.path = path.slice();\n  }\n\n  next() {\n    if (this.path.length > 0) {\n      return this.path.shift();\n    }\n\n    return '';\n  }\n\n}\n\nconst readRedirects = root => {\n  return Array.from(root.children).filter(el => el.tagName === 'ION-ROUTE-REDIRECT').map(el => {\n    const to = readProp(el, 'to');\n    return {\n      from: parsePath(readProp(el, 'from')),\n      to: to == null ? undefined : parsePath(to)\n    };\n  });\n};\n\nconst readRoutes = root => {\n  return flattenRouterTree(readRouteNodes(root));\n};\n\nconst readRouteNodes = (root, node = root) => {\n  return Array.from(node.children).filter(el => el.tagName === 'ION-ROUTE' && el.component).map(el => {\n    const component = readProp(el, 'component');\n\n    if (component == null) {\n      throw new Error('component missing in ion-route');\n    }\n\n    return {\n      path: parsePath(readProp(el, 'url')),\n      id: component.toLowerCase(),\n      params: el.componentProps,\n      children: readRouteNodes(root, el)\n    };\n  });\n};\n\nconst readProp = (el, prop) => {\n  if (prop in el) {\n    return el[prop];\n  }\n\n  if (el.hasAttribute(prop)) {\n    return el.getAttribute(prop);\n  }\n\n  return null;\n};\n\nconst flattenRouterTree = nodes => {\n  const routes = [];\n\n  for (const node of nodes) {\n    flattenNode([], routes, node);\n  }\n\n  return routes;\n};\n\nconst flattenNode = (chain, routes, node) => {\n  const s = chain.slice();\n  s.push({\n    id: node.id,\n    path: node.path,\n    params: node.params\n  });\n\n  if (node.children.length === 0) {\n    routes.push(s);\n    return;\n  }\n\n  for (const sub of node.children) {\n    flattenNode(s, routes, sub);\n  }\n};\n\nconst Router = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.previousPath = null;\n    this.busy = false;\n    this.state = 0;\n    this.lastState = 0;\n    /**\n     * By default `ion-router` will match the routes at the root path (\"/\").\n     * That can be changed when\n     *\n     */\n\n    this.root = '/';\n    /**\n     * The router can work in two \"modes\":\n     * - With hash: `/index.html#/path/to/page`\n     * - Without hash: `/path/to/page`\n     *\n     * Using one or another might depend in the requirements of your app and/or where it's deployed.\n     *\n     * Usually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might\n     * requires additional server-side configuration in order to properly work.\n     *\n     * On the otherside hash-navigation is much easier to deploy, it even works over the file protocol.\n     *\n     * By default, this property is `true`, change to `false` to allow hash-less URLs.\n     */\n\n    this.useHash = true;\n    this.ionRouteWillChange = createEvent(this, \"ionRouteWillChange\", 7);\n    this.ionRouteDidChange = createEvent(this, \"ionRouteDidChange\", 7);\n  }\n\n  componentWillLoad() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      console.debug('[ion-router] router will load');\n      yield waitUntilNavNode();\n      console.debug('[ion-router] found nav');\n      yield _this.onRoutesChanged();\n    })();\n  }\n\n  componentDidLoad() {\n    window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\n    window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\n  }\n\n  onPopState() {\n    const direction = this.historyDirection();\n    const path = this.getPath();\n    console.debug('[ion-router] URL changed -> update nav', path, direction);\n    return this.writeNavStateRoot(path, direction);\n  }\n\n  onBackButton(ev) {\n    ev.detail.register(0, () => this.back());\n  }\n  /**\n   * Navigate to the specified URL.\n   *\n   * @param url The url to navigate to.\n   * @param direction The direction of the animation. Defaults to `\"forward\"`.\n   */\n\n\n  push(url, direction = 'forward') {\n    if (url.startsWith('.')) {\n      url = new URL(url, window.location.href).pathname;\n    }\n\n    console.debug('[ion-router] URL pushed -> updating nav', url, direction);\n    const path = parsePath(url);\n    this.setPath(path, direction);\n    return this.writeNavStateRoot(path, direction);\n  }\n  /**\n   * Go back to previous page in the window.history.\n   */\n\n\n  back() {\n    window.history.back();\n    return Promise.resolve(this.waitPromise);\n  }\n  /** @internal */\n\n\n  printDebug() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      console.debug('CURRENT PATH', _this2.getPath());\n      console.debug('PREVIOUS PATH', _this2.previousPath);\n      printRoutes(readRoutes(_this2.el));\n      printRedirects(readRedirects(_this2.el));\n    })();\n  }\n  /** @internal */\n\n\n  navChanged(direction) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this3.busy) {\n        console.warn('[ion-router] router is busy, navChanged was cancelled');\n        return false;\n      }\n\n      const {\n        ids,\n        outlet\n      } = yield readNavState(window.document.body);\n      const routes = readRoutes(_this3.el);\n      const chain = routerIDsToChain(ids, routes);\n\n      if (!chain) {\n        console.warn('[ion-router] no matching URL for ', ids.map(i => i.id));\n        return false;\n      }\n\n      const path = chainToPath(chain);\n\n      if (!path) {\n        console.warn('[ion-router] router could not match path because some required param is missing');\n        return false;\n      }\n\n      console.debug('[ion-router] nav changed -> update URL', ids, path);\n\n      _this3.setPath(path, direction);\n\n      yield _this3.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, path, null, ids.length);\n      return true;\n    })();\n  }\n\n  onRedirectChanged() {\n    const path = this.getPath();\n\n    if (path && routeRedirect(path, readRedirects(this.el))) {\n      this.writeNavStateRoot(path, ROUTER_INTENT_NONE);\n    }\n  }\n\n  onRoutesChanged() {\n    return this.writeNavStateRoot(this.getPath(), ROUTER_INTENT_NONE);\n  }\n\n  historyDirection() {\n    const win = window;\n\n    if (win.history.state === null) {\n      this.state++;\n      win.history.replaceState(this.state, win.document.title, win.document.location && win.document.location.href);\n    }\n\n    const state = win.history.state;\n    const lastState = this.lastState;\n    this.lastState = state;\n\n    if (state > lastState) {\n      return ROUTER_INTENT_FORWARD;\n    } else if (state < lastState) {\n      return ROUTER_INTENT_BACK;\n    } else {\n      return ROUTER_INTENT_NONE;\n    }\n  }\n\n  writeNavStateRoot(path, direction) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!path) {\n        console.error('[ion-router] URL is not part of the routing set');\n        return false;\n      } // lookup redirect rule\n\n\n      const redirects = readRedirects(_this4.el);\n      const redirect = routeRedirect(path, redirects);\n      let redirectFrom = null;\n\n      if (redirect) {\n        _this4.setPath(redirect.to, direction);\n\n        redirectFrom = redirect.from;\n        path = redirect.to;\n      } // lookup route chain\n\n\n      const routes = readRoutes(_this4.el);\n      const chain = routerPathToChain(path, routes);\n\n      if (!chain) {\n        console.error('[ion-router] the path does not match any route');\n        return false;\n      } // write DOM give\n\n\n      return _this4.safeWriteNavState(document.body, chain, direction, path, redirectFrom);\n    })();\n  }\n\n  safeWriteNavState(node, chain, direction, path, redirectFrom, index = 0) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const unlock = yield _this5.lock();\n      let changed = false;\n\n      try {\n        changed = yield _this5.writeNavState(node, chain, direction, path, redirectFrom, index);\n      } catch (e) {\n        console.error(e);\n      }\n\n      unlock();\n      return changed;\n    })();\n  }\n\n  lock() {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      const p = _this6.waitPromise;\n      let resolve;\n      _this6.waitPromise = new Promise(r => resolve = r);\n\n      if (p !== undefined) {\n        yield p;\n      }\n\n      return resolve;\n    })();\n  }\n\n  writeNavState(node, chain, direction, path, redirectFrom, index = 0) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this7.busy) {\n        console.warn('[ion-router] router is busy, transition was cancelled');\n        return false;\n      }\n\n      _this7.busy = true; // generate route event and emit will change\n\n      const routeEvent = _this7.routeChangeEvent(path, redirectFrom);\n\n      if (routeEvent) {\n        _this7.ionRouteWillChange.emit(routeEvent);\n      }\n\n      const changed = yield writeNavState(node, chain, direction, index);\n      _this7.busy = false;\n\n      if (changed) {\n        console.debug('[ion-router] route changed', path);\n      } // emit did change\n\n\n      if (routeEvent) {\n        _this7.ionRouteDidChange.emit(routeEvent);\n      }\n\n      return changed;\n    })();\n  }\n\n  setPath(path, direction) {\n    this.state++;\n    writePath(window.history, this.root, this.useHash, path, direction, this.state);\n  }\n\n  getPath() {\n    return readPath(window.location, this.root, this.useHash);\n  }\n\n  routeChangeEvent(path, redirectFromPath) {\n    const from = this.previousPath;\n    const to = generatePath(path);\n    this.previousPath = to;\n\n    if (to === from) {\n      return null;\n    }\n\n    const redirectedFrom = redirectFromPath ? generatePath(redirectFromPath) : null;\n    return {\n      from,\n      redirectedFrom,\n      to\n    };\n  }\n\n  get el() {\n    return getElement(this);\n  }\n\n};\nconst RouterLink = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * When using a router, it specifies the transition direction when navigating to\n     * another page using `href`.\n     */\n\n    this.routerDirection = 'forward';\n\n    this.onClick = ev => {\n      openURL(this.href, ev, this.routerDirection);\n    };\n  }\n\n  render() {\n    const mode = getIonMode(this);\n    const attrs = {\n      href: this.href,\n      rel: this.rel,\n      target: this.target\n    };\n    return h(Host, {\n      onClick: this.onClick,\n      class: Object.assign(Object.assign({}, createColorClasses(this.color)), {\n        [mode]: true,\n        'ion-activatable': true\n      })\n    }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null)));\n  }\n\n  static get style() {\n    return \":host{--background:transparent;--color:var(--ion-color-primary,#3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\";\n  }\n\n};\nexport { Route as ion_route, RouteRedirect as ion_route_redirect, Router as ion_router, RouterLink as ion_router_link };","map":{"version":3,"sources":["/home/ivan/HACKUPC2022/Join/node_modules/ionic-mqtt/node_modules/@ionic/core/dist/esm/ion-route_4.entry.js"],"names":["r","registerInstance","d","createEvent","e","getElement","c","getIonMode","h","H","Host","debounce","o","openURL","createColorClasses","Route","constructor","hostRef","url","ionRouteDataChanged","onUpdate","newValue","emit","onComponentProps","oldValue","keys1","Object","keys","keys2","length","key","connectedCallback","watchers","RouteRedirect","ionRouteRedirectChanged","propDidChange","ROUTER_INTENT_NONE","ROUTER_INTENT_FORWARD","ROUTER_INTENT_BACK","generatePath","segments","path","filter","s","join","chainToPath","chain","route","segment","param","params","slice","push","writePath","history","root","useHash","direction","state","parsePath","pushState","replaceState","removePrefix","prefix","i","readPath","loc","pathname","hash","split","map","trim","printRoutes","routes","console","group","forEach","ids","id","debug","groupEnd","printRedirects","redirects","redirect","to","from","writeNavState","index","changed","outlet","searchNavNode","componentOnReady","result","setRouteId","element","markVisible","error","readNavState","node","getRouteId","undefined","waitUntilNavNode","document","body","Promise","resolve","window","addEventListener","once","QUERY","matches","querySelector","matchesRedirect","input","expected","routeRedirect","find","matchesIDs","len","Math","min","toLowerCase","matchesPath","inputPath","RouterSegments","matchesDefault","allparams","data","next","mergeParams","a","b","assign","routerIDsToChain","chains","match","maxMatches","plainIDs","score","routerPathToChain","matchedChain","computePriority","level","pow","shift","readRedirects","Array","children","el","tagName","readProp","readRoutes","flattenRouterTree","readRouteNodes","component","Error","componentProps","prop","hasAttribute","getAttribute","nodes","flattenNode","sub","Router","previousPath","busy","lastState","ionRouteWillChange","ionRouteDidChange","componentWillLoad","onRoutesChanged","componentDidLoad","onRedirectChanged","bind","onPopState","historyDirection","getPath","writeNavStateRoot","onBackButton","ev","detail","register","back","startsWith","URL","location","href","setPath","waitPromise","printDebug","navChanged","warn","safeWriteNavState","win","title","redirectFrom","unlock","lock","p","routeEvent","routeChangeEvent","redirectFromPath","redirectedFrom","RouterLink","routerDirection","onClick","render","mode","attrs","rel","target","class","color","style","ion_route","ion_route_redirect","ion_router","ion_router_link"],"mappings":"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","sourcesContent":["import { r as registerInstance, d as createEvent, e as getElement, c as getIonMode, h, H as Host } from './core-feeeff0d.js';\nimport './config-3c7f3790.js';\nimport { e as debounce } from './helpers-46f4a262.js';\nimport { o as openURL, c as createColorClasses } from './theme-18cbe2cc.js';\n\nconst Route = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * Relative path that needs to match in order for this route to apply.\n         *\n         * Accepts paths similar to expressjs so that you can define parameters\n         * in the url /foo/:bar where bar would be available in incoming props.\n         */\n        this.url = '';\n        this.ionRouteDataChanged = createEvent(this, \"ionRouteDataChanged\", 7);\n    }\n    onUpdate(newValue) {\n        this.ionRouteDataChanged.emit(newValue);\n    }\n    onComponentProps(newValue, oldValue) {\n        if (newValue === oldValue) {\n            return;\n        }\n        const keys1 = newValue ? Object.keys(newValue) : [];\n        const keys2 = oldValue ? Object.keys(oldValue) : [];\n        if (keys1.length !== keys2.length) {\n            this.onUpdate(newValue);\n            return;\n        }\n        for (const key of keys1) {\n            if (newValue[key] !== oldValue[key]) {\n                this.onUpdate(newValue);\n                return;\n            }\n        }\n    }\n    connectedCallback() {\n        this.ionRouteDataChanged.emit();\n    }\n    static get watchers() { return {\n        \"url\": [\"onUpdate\"],\n        \"component\": [\"onUpdate\"],\n        \"componentProps\": [\"onComponentProps\"]\n    }; }\n};\n\nconst RouteRedirect = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionRouteRedirectChanged = createEvent(this, \"ionRouteRedirectChanged\", 7);\n    }\n    propDidChange() {\n        this.ionRouteRedirectChanged.emit();\n    }\n    connectedCallback() {\n        this.ionRouteRedirectChanged.emit();\n    }\n    static get watchers() { return {\n        \"from\": [\"propDidChange\"],\n        \"to\": [\"propDidChange\"]\n    }; }\n};\n\nconst ROUTER_INTENT_NONE = 'root';\r\nconst ROUTER_INTENT_FORWARD = 'forward';\r\nconst ROUTER_INTENT_BACK = 'back';\n\nconst generatePath = (segments) => {\r\n    const path = segments\r\n        .filter(s => s.length > 0)\r\n        .join('/');\r\n    return '/' + path;\r\n};\r\nconst chainToPath = (chain) => {\r\n    const path = [];\r\n    for (const route of chain) {\r\n        for (const segment of route.path) {\r\n            if (segment[0] === ':') {\r\n                const param = route.params && route.params[segment.slice(1)];\r\n                if (!param) {\r\n                    return null;\r\n                }\r\n                path.push(param);\r\n            }\r\n            else if (segment !== '') {\r\n                path.push(segment);\r\n            }\r\n        }\r\n    }\r\n    return path;\r\n};\r\nconst writePath = (history, root, useHash, path, direction, state) => {\r\n    let url = generatePath([\r\n        ...parsePath(root),\r\n        ...path\r\n    ]);\r\n    if (useHash) {\r\n        url = '#' + url;\r\n    }\r\n    if (direction === ROUTER_INTENT_FORWARD) {\r\n        history.pushState(state, '', url);\r\n    }\r\n    else {\r\n        history.replaceState(state, '', url);\r\n    }\r\n};\r\nconst removePrefix = (prefix, path) => {\r\n    if (prefix.length > path.length) {\r\n        return null;\r\n    }\r\n    if (prefix.length <= 1 && prefix[0] === '') {\r\n        return path;\r\n    }\r\n    for (let i = 0; i < prefix.length; i++) {\r\n        if (prefix[i].length > 0 && prefix[i] !== path[i]) {\r\n            return null;\r\n        }\r\n    }\r\n    if (path.length === prefix.length) {\r\n        return [''];\r\n    }\r\n    return path.slice(prefix.length);\r\n};\r\nconst readPath = (loc, root, useHash) => {\r\n    let pathname = loc.pathname;\r\n    if (useHash) {\r\n        const hash = loc.hash;\r\n        pathname = (hash[0] === '#')\r\n            ? hash.slice(1)\r\n            : '';\r\n    }\r\n    const prefix = parsePath(root);\r\n    const path = parsePath(pathname);\r\n    return removePrefix(prefix, path);\r\n};\r\nconst parsePath = (path) => {\r\n    if (path == null) {\r\n        return [''];\r\n    }\r\n    const segments = path.split('/')\r\n        .map(s => s.trim())\r\n        .filter(s => s.length > 0);\r\n    if (segments.length === 0) {\r\n        return [''];\r\n    }\r\n    else {\r\n        return segments;\r\n    }\r\n};\n\nconst printRoutes = (routes) => {\r\n    console.group(`[ion-core] ROUTES[${routes.length}]`);\r\n    for (const chain of routes) {\r\n        const path = [];\r\n        chain.forEach(r => path.push(...r.path));\r\n        const ids = chain.map(r => r.id);\r\n        console.debug(`%c ${generatePath(path)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\r\n    }\r\n    console.groupEnd();\r\n};\r\nconst printRedirects = (redirects) => {\r\n    console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\r\n    for (const redirect of redirects) {\r\n        if (redirect.to) {\r\n            console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to)}`, 'font-weight: bold');\r\n        }\r\n    }\r\n    console.groupEnd();\r\n};\n\nconst writeNavState = async (root, chain, direction, index, changed = false) => {\r\n    try {\r\n        // find next navigation outlet in the DOM\r\n        const outlet = searchNavNode(root);\r\n        // make sure we can continue interacting the DOM, otherwise abort\r\n        if (index >= chain.length || !outlet) {\r\n            return changed;\r\n        }\r\n        await outlet.componentOnReady();\r\n        const route = chain[index];\r\n        const result = await outlet.setRouteId(route.id, route.params, direction);\r\n        // if the outlet changed the page, reset navigation to neutral (no direction)\r\n        // this means nested outlets will not animate\r\n        if (result.changed) {\r\n            direction = ROUTER_INTENT_NONE;\r\n            changed = true;\r\n        }\r\n        // recursively set nested outlets\r\n        changed = await writeNavState(result.element, chain, direction, index + 1, changed);\r\n        // once all nested outlets are visible let's make the parent visible too,\r\n        // using markVisible prevents flickering\r\n        if (result.markVisible) {\r\n            await result.markVisible();\r\n        }\r\n        return changed;\r\n    }\r\n    catch (e) {\r\n        console.error(e);\r\n        return false;\r\n    }\r\n};\r\nconst readNavState = async (root) => {\r\n    const ids = [];\r\n    let outlet;\r\n    let node = root;\r\n    // tslint:disable-next-line:no-constant-condition\r\n    while (true) {\r\n        outlet = searchNavNode(node);\r\n        if (outlet) {\r\n            const id = await outlet.getRouteId();\r\n            if (id) {\r\n                node = id.element;\r\n                id.element = undefined;\r\n                ids.push(id);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        else {\r\n            break;\r\n        }\r\n    }\r\n    return { ids, outlet };\r\n};\r\nconst waitUntilNavNode = () => {\r\n    if (searchNavNode(document.body)) {\r\n        return Promise.resolve();\r\n    }\r\n    return new Promise(resolve => {\r\n        window.addEventListener('ionNavWillLoad', resolve, { once: true });\r\n    });\r\n};\r\nconst QUERY = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\r\nconst searchNavNode = (root) => {\r\n    if (!root) {\r\n        return undefined;\r\n    }\r\n    if (root.matches(QUERY)) {\r\n        return root;\r\n    }\r\n    const outlet = root.querySelector(QUERY);\r\n    return outlet ? outlet : undefined;\r\n};\n\nconst matchesRedirect = (input, route) => {\r\n    const { from, to } = route;\r\n    if (to === undefined) {\r\n        return false;\r\n    }\r\n    if (from.length > input.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < from.length; i++) {\r\n        const expected = from[i];\r\n        if (expected === '*') {\r\n            return true;\r\n        }\r\n        if (expected !== input[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return from.length === input.length;\r\n};\r\nconst routeRedirect = (path, routes) => {\r\n    return routes.find(route => matchesRedirect(path, route));\r\n};\r\nconst matchesIDs = (ids, chain) => {\r\n    const len = Math.min(ids.length, chain.length);\r\n    let i = 0;\r\n    for (; i < len; i++) {\r\n        if (ids[i].toLowerCase() !== chain[i].id) {\r\n            break;\r\n        }\r\n    }\r\n    return i;\r\n};\r\nconst matchesPath = (inputPath, chain) => {\r\n    const segments = new RouterSegments(inputPath);\r\n    let matchesDefault = false;\r\n    let allparams;\r\n    for (let i = 0; i < chain.length; i++) {\r\n        const path = chain[i].path;\r\n        if (path[0] === '') {\r\n            matchesDefault = true;\r\n        }\r\n        else {\r\n            for (const segment of path) {\r\n                const data = segments.next();\r\n                // data param\r\n                if (segment[0] === ':') {\r\n                    if (data === '') {\r\n                        return null;\r\n                    }\r\n                    allparams = allparams || [];\r\n                    const params = allparams[i] || (allparams[i] = {});\r\n                    params[segment.slice(1)] = data;\r\n                }\r\n                else if (data !== segment) {\r\n                    return null;\r\n                }\r\n            }\r\n            matchesDefault = false;\r\n        }\r\n    }\r\n    const matches = (matchesDefault)\r\n        ? matchesDefault === (segments.next() === '')\r\n        : true;\r\n    if (!matches) {\r\n        return null;\r\n    }\r\n    if (allparams) {\r\n        return chain.map((route, i) => ({\r\n            id: route.id,\r\n            path: route.path,\r\n            params: mergeParams(route.params, allparams[i])\r\n        }));\r\n    }\r\n    return chain;\r\n};\r\nconst mergeParams = (a, b) => {\r\n    if (!a && b) {\r\n        return b;\r\n    }\r\n    else if (a && !b) {\r\n        return a;\r\n    }\r\n    else if (a && b) {\r\n        return Object.assign(Object.assign({}, a), b);\r\n    }\r\n    return undefined;\r\n};\r\nconst routerIDsToChain = (ids, chains) => {\r\n    let match = null;\r\n    let maxMatches = 0;\r\n    const plainIDs = ids.map(i => i.id);\r\n    for (const chain of chains) {\r\n        const score = matchesIDs(plainIDs, chain);\r\n        if (score > maxMatches) {\r\n            match = chain;\r\n            maxMatches = score;\r\n        }\r\n    }\r\n    if (match) {\r\n        return match.map((route, i) => ({\r\n            id: route.id,\r\n            path: route.path,\r\n            params: mergeParams(route.params, ids[i] && ids[i].params)\r\n        }));\r\n    }\r\n    return null;\r\n};\r\nconst routerPathToChain = (path, chains) => {\r\n    let match = null;\r\n    let matches = 0;\r\n    for (const chain of chains) {\r\n        const matchedChain = matchesPath(path, chain);\r\n        if (matchedChain !== null) {\r\n            const score = computePriority(matchedChain);\r\n            if (score > matches) {\r\n                matches = score;\r\n                match = matchedChain;\r\n            }\r\n        }\r\n    }\r\n    return match;\r\n};\r\nconst computePriority = (chain) => {\r\n    let score = 1;\r\n    let level = 1;\r\n    for (const route of chain) {\r\n        for (const path of route.path) {\r\n            if (path[0] === ':') {\r\n                score += Math.pow(1, level);\r\n            }\r\n            else if (path !== '') {\r\n                score += Math.pow(2, level);\r\n            }\r\n            level++;\r\n        }\r\n    }\r\n    return score;\r\n};\r\nclass RouterSegments {\r\n    constructor(path) {\r\n        this.path = path.slice();\r\n    }\r\n    next() {\r\n        if (this.path.length > 0) {\r\n            return this.path.shift();\r\n        }\r\n        return '';\r\n    }\r\n}\n\nconst readRedirects = (root) => {\r\n    return Array.from(root.children)\r\n        .filter(el => el.tagName === 'ION-ROUTE-REDIRECT')\r\n        .map(el => {\r\n        const to = readProp(el, 'to');\r\n        return {\r\n            from: parsePath(readProp(el, 'from')),\r\n            to: to == null ? undefined : parsePath(to),\r\n        };\r\n    });\r\n};\r\nconst readRoutes = (root) => {\r\n    return flattenRouterTree(readRouteNodes(root));\r\n};\r\nconst readRouteNodes = (root, node = root) => {\r\n    return Array.from(node.children)\r\n        .filter(el => el.tagName === 'ION-ROUTE' && el.component)\r\n        .map(el => {\r\n        const component = readProp(el, 'component');\r\n        if (component == null) {\r\n            throw new Error('component missing in ion-route');\r\n        }\r\n        return {\r\n            path: parsePath(readProp(el, 'url')),\r\n            id: component.toLowerCase(),\r\n            params: el.componentProps,\r\n            children: readRouteNodes(root, el)\r\n        };\r\n    });\r\n};\r\nconst readProp = (el, prop) => {\r\n    if (prop in el) {\r\n        return el[prop];\r\n    }\r\n    if (el.hasAttribute(prop)) {\r\n        return el.getAttribute(prop);\r\n    }\r\n    return null;\r\n};\r\nconst flattenRouterTree = (nodes) => {\r\n    const routes = [];\r\n    for (const node of nodes) {\r\n        flattenNode([], routes, node);\r\n    }\r\n    return routes;\r\n};\r\nconst flattenNode = (chain, routes, node) => {\r\n    const s = chain.slice();\r\n    s.push({\r\n        id: node.id,\r\n        path: node.path,\r\n        params: node.params\r\n    });\r\n    if (node.children.length === 0) {\r\n        routes.push(s);\r\n        return;\r\n    }\r\n    for (const sub of node.children) {\r\n        flattenNode(s, routes, sub);\r\n    }\r\n};\n\nconst Router = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.previousPath = null;\n        this.busy = false;\n        this.state = 0;\n        this.lastState = 0;\n        /**\n         * By default `ion-router` will match the routes at the root path (\"/\").\n         * That can be changed when\n         *\n         */\n        this.root = '/';\n        /**\n         * The router can work in two \"modes\":\n         * - With hash: `/index.html#/path/to/page`\n         * - Without hash: `/path/to/page`\n         *\n         * Using one or another might depend in the requirements of your app and/or where it's deployed.\n         *\n         * Usually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might\n         * requires additional server-side configuration in order to properly work.\n         *\n         * On the otherside hash-navigation is much easier to deploy, it even works over the file protocol.\n         *\n         * By default, this property is `true`, change to `false` to allow hash-less URLs.\n         */\n        this.useHash = true;\n        this.ionRouteWillChange = createEvent(this, \"ionRouteWillChange\", 7);\n        this.ionRouteDidChange = createEvent(this, \"ionRouteDidChange\", 7);\n    }\n    async componentWillLoad() {\n        console.debug('[ion-router] router will load');\n        await waitUntilNavNode();\n        console.debug('[ion-router] found nav');\n        await this.onRoutesChanged();\n    }\n    componentDidLoad() {\n        window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\n        window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\n    }\n    onPopState() {\n        const direction = this.historyDirection();\n        const path = this.getPath();\n        console.debug('[ion-router] URL changed -> update nav', path, direction);\n        return this.writeNavStateRoot(path, direction);\n    }\n    onBackButton(ev) {\n        ev.detail.register(0, () => this.back());\n    }\n    /**\n     * Navigate to the specified URL.\n     *\n     * @param url The url to navigate to.\n     * @param direction The direction of the animation. Defaults to `\"forward\"`.\n     */\n    push(url, direction = 'forward') {\n        if (url.startsWith('.')) {\n            url = (new URL(url, window.location.href)).pathname;\n        }\n        console.debug('[ion-router] URL pushed -> updating nav', url, direction);\n        const path = parsePath(url);\n        this.setPath(path, direction);\n        return this.writeNavStateRoot(path, direction);\n    }\n    /**\n     * Go back to previous page in the window.history.\n     */\n    back() {\n        window.history.back();\n        return Promise.resolve(this.waitPromise);\n    }\n    /** @internal */\n    async printDebug() {\n        console.debug('CURRENT PATH', this.getPath());\n        console.debug('PREVIOUS PATH', this.previousPath);\n        printRoutes(readRoutes(this.el));\n        printRedirects(readRedirects(this.el));\n    }\n    /** @internal */\n    async navChanged(direction) {\n        if (this.busy) {\n            console.warn('[ion-router] router is busy, navChanged was cancelled');\n            return false;\n        }\n        const { ids, outlet } = await readNavState(window.document.body);\n        const routes = readRoutes(this.el);\n        const chain = routerIDsToChain(ids, routes);\n        if (!chain) {\n            console.warn('[ion-router] no matching URL for ', ids.map(i => i.id));\n            return false;\n        }\n        const path = chainToPath(chain);\n        if (!path) {\n            console.warn('[ion-router] router could not match path because some required param is missing');\n            return false;\n        }\n        console.debug('[ion-router] nav changed -> update URL', ids, path);\n        this.setPath(path, direction);\n        await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, path, null, ids.length);\n        return true;\n    }\n    onRedirectChanged() {\n        const path = this.getPath();\n        if (path && routeRedirect(path, readRedirects(this.el))) {\n            this.writeNavStateRoot(path, ROUTER_INTENT_NONE);\n        }\n    }\n    onRoutesChanged() {\n        return this.writeNavStateRoot(this.getPath(), ROUTER_INTENT_NONE);\n    }\n    historyDirection() {\n        const win = window;\n        if (win.history.state === null) {\n            this.state++;\n            win.history.replaceState(this.state, win.document.title, win.document.location && win.document.location.href);\n        }\n        const state = win.history.state;\n        const lastState = this.lastState;\n        this.lastState = state;\n        if (state > lastState) {\n            return ROUTER_INTENT_FORWARD;\n        }\n        else if (state < lastState) {\n            return ROUTER_INTENT_BACK;\n        }\n        else {\n            return ROUTER_INTENT_NONE;\n        }\n    }\n    async writeNavStateRoot(path, direction) {\n        if (!path) {\n            console.error('[ion-router] URL is not part of the routing set');\n            return false;\n        }\n        // lookup redirect rule\n        const redirects = readRedirects(this.el);\n        const redirect = routeRedirect(path, redirects);\n        let redirectFrom = null;\n        if (redirect) {\n            this.setPath(redirect.to, direction);\n            redirectFrom = redirect.from;\n            path = redirect.to;\n        }\n        // lookup route chain\n        const routes = readRoutes(this.el);\n        const chain = routerPathToChain(path, routes);\n        if (!chain) {\n            console.error('[ion-router] the path does not match any route');\n            return false;\n        }\n        // write DOM give\n        return this.safeWriteNavState(document.body, chain, direction, path, redirectFrom);\n    }\n    async safeWriteNavState(node, chain, direction, path, redirectFrom, index = 0) {\n        const unlock = await this.lock();\n        let changed = false;\n        try {\n            changed = await this.writeNavState(node, chain, direction, path, redirectFrom, index);\n        }\n        catch (e) {\n            console.error(e);\n        }\n        unlock();\n        return changed;\n    }\n    async lock() {\n        const p = this.waitPromise;\n        let resolve;\n        this.waitPromise = new Promise(r => resolve = r);\n        if (p !== undefined) {\n            await p;\n        }\n        return resolve;\n    }\n    async writeNavState(node, chain, direction, path, redirectFrom, index = 0) {\n        if (this.busy) {\n            console.warn('[ion-router] router is busy, transition was cancelled');\n            return false;\n        }\n        this.busy = true;\n        // generate route event and emit will change\n        const routeEvent = this.routeChangeEvent(path, redirectFrom);\n        if (routeEvent) {\n            this.ionRouteWillChange.emit(routeEvent);\n        }\n        const changed = await writeNavState(node, chain, direction, index);\n        this.busy = false;\n        if (changed) {\n            console.debug('[ion-router] route changed', path);\n        }\n        // emit did change\n        if (routeEvent) {\n            this.ionRouteDidChange.emit(routeEvent);\n        }\n        return changed;\n    }\n    setPath(path, direction) {\n        this.state++;\n        writePath(window.history, this.root, this.useHash, path, direction, this.state);\n    }\n    getPath() {\n        return readPath(window.location, this.root, this.useHash);\n    }\n    routeChangeEvent(path, redirectFromPath) {\n        const from = this.previousPath;\n        const to = generatePath(path);\n        this.previousPath = to;\n        if (to === from) {\n            return null;\n        }\n        const redirectedFrom = redirectFromPath ? generatePath(redirectFromPath) : null;\n        return {\n            from,\n            redirectedFrom,\n            to,\n        };\n    }\n    get el() { return getElement(this); }\n};\n\nconst RouterLink = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * When using a router, it specifies the transition direction when navigating to\n         * another page using `href`.\n         */\n        this.routerDirection = 'forward';\n        this.onClick = (ev) => {\n            openURL(this.href, ev, this.routerDirection);\n        };\n    }\n    render() {\n        const mode = getIonMode(this);\n        const attrs = {\n            href: this.href,\n            rel: this.rel,\n            target: this.target\n        };\n        return (h(Host, { onClick: this.onClick, class: Object.assign(Object.assign({}, createColorClasses(this.color)), { [mode]: true, 'ion-activatable': true }) }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null))));\n    }\n    static get style() { return \":host{--background:transparent;--color:var(--ion-color-primary,#3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\"; }\n};\n\nexport { Route as ion_route, RouteRedirect as ion_route_redirect, Router as ion_router, RouterLink as ion_router_link };\n"]},"metadata":{},"sourceType":"module"}
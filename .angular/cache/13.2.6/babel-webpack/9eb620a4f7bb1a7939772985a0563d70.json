{"ast":null,"code":"import _asyncToGenerator from \"/home/ivan/HACKUPC2022/Join/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { r as registerInstance, c as getIonMode, d as createEvent, h, H as Host, e as getElement } from './core-feeeff0d.js';\nimport { b as config } from './config-3c7f3790.js';\nimport { i as isEndSide, b as assert, c as clamp } from './helpers-46f4a262.js';\nimport './animation-af478fe9.js';\nimport { GESTURE_CONTROLLER } from './index-624eea58.js';\nimport { m as menuController } from './index-1e5940d5.js';\nimport { c as createColorClasses } from './theme-18cbe2cc.js';\nimport { g as getTimeGivenProgression, P as Point } from './cubic-bezier-2812fda3.js';\nconst Menu = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.lastOnEnd = 0;\n    this.blocker = GESTURE_CONTROLLER.createBlocker({\n      disableScroll: true\n    });\n    this.mode = getIonMode(this);\n    this.isAnimating = false;\n    this._isOpen = false;\n    this.isPaneVisible = false;\n    this.isEndSide = false;\n    /**\n     * If `true`, the menu is disabled.\n     */\n\n    this.disabled = false;\n    /**\n     * Which side of the view the menu should be placed.\n     */\n\n    this.side = 'start';\n    /**\n     * If `true`, swiping the menu is enabled.\n     */\n\n    this.swipeGesture = true;\n    /**\n     * The edge threshold for dragging the menu open.\n     * If a drag/swipe happens over this value, the menu is not triggered.\n     */\n\n    this.maxEdgeStart = 50;\n    this.ionWillOpen = createEvent(this, \"ionWillOpen\", 7);\n    this.ionWillClose = createEvent(this, \"ionWillClose\", 7);\n    this.ionDidOpen = createEvent(this, \"ionDidOpen\", 7);\n    this.ionDidClose = createEvent(this, \"ionDidClose\", 7);\n    this.ionMenuChange = createEvent(this, \"ionMenuChange\", 7);\n  }\n\n  typeChanged(type, oldType) {\n    const contentEl = this.contentEl;\n\n    if (contentEl) {\n      if (oldType !== undefined) {\n        contentEl.classList.remove(`menu-content-${oldType}`);\n      }\n\n      contentEl.classList.add(`menu-content-${type}`);\n      contentEl.removeAttribute('style');\n    }\n\n    if (this.menuInnerEl) {\n      // Remove effects of previous animations\n      this.menuInnerEl.removeAttribute('style');\n    }\n\n    this.animation = undefined;\n  }\n\n  disabledChanged() {\n    this.updateState();\n    this.ionMenuChange.emit({\n      disabled: this.disabled,\n      open: this._isOpen\n    });\n  }\n\n  sideChanged() {\n    this.isEndSide = isEndSide(this.side);\n  }\n\n  swipeGestureChanged() {\n    this.updateState();\n  }\n\n  connectedCallback() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.type === undefined) {\n        _this.type = config.get('menuType', _this.mode === 'ios' ? 'reveal' : 'overlay');\n      }\n\n      const el = _this.el;\n      const parent = el.parentNode;\n\n      if (_this.contentId === undefined) {\n        console.warn(`[DEPRECATED][ion-menu] Using the [main] attribute is deprecated, please use the \"contentId\" property instead:\nBEFORE:\n  <ion-menu>...</ion-menu>\n  <div main>...</div>\n\nAFTER:\n  <ion-menu contentId=\"my-content\"></ion-menu>\n  <div id=\"my-content\">...</div>\n`);\n      }\n\n      const content = _this.contentId !== undefined ? document.getElementById(_this.contentId) : parent && parent.querySelector && parent.querySelector('[main]');\n\n      if (!content || !content.tagName) {\n        // requires content element\n        console.error('Menu: must have a \"content\" element to listen for drag events on.');\n        return;\n      }\n\n      _this.contentEl = content; // add menu's content classes\n\n      content.classList.add('menu-content');\n\n      _this.typeChanged(_this.type, undefined);\n\n      _this.sideChanged(); // register this menu with the app's menu controller\n\n\n      menuController._register(_this);\n\n      _this.gesture = (yield import('./index-624eea58.js')).createGesture({\n        el: document,\n        gestureName: 'menu-swipe',\n        gesturePriority: 30,\n        threshold: 10,\n        canStart: ev => _this.canStart(ev),\n        onWillStart: () => _this.onWillStart(),\n        onStart: () => _this.onStart(),\n        onMove: ev => _this.onMove(ev),\n        onEnd: ev => _this.onEnd(ev)\n      });\n\n      _this.updateState();\n    })();\n  }\n\n  componentDidLoad() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.ionMenuChange.emit({\n        disabled: _this2.disabled,\n        open: _this2._isOpen\n      });\n\n      _this2.updateState();\n    })();\n  }\n\n  disconnectedCallback() {\n    this.blocker.destroy();\n\n    menuController._unregister(this);\n\n    if (this.animation) {\n      this.animation.destroy();\n    }\n\n    if (this.gesture) {\n      this.gesture.destroy();\n      this.gesture = undefined;\n    }\n\n    this.animation = undefined;\n    this.contentEl = this.backdropEl = this.menuInnerEl = undefined;\n  }\n\n  onSplitPaneChanged(ev) {\n    this.isPaneVisible = ev.detail.isPane(this.el);\n    this.updateState();\n  }\n\n  onBackdropClick(ev) {\n    if (this._isOpen && this.lastOnEnd < ev.timeStamp - 100) {\n      const shouldClose = ev.composedPath ? !ev.composedPath().includes(this.menuInnerEl) : false;\n\n      if (shouldClose) {\n        ev.preventDefault();\n        ev.stopPropagation();\n        this.close();\n      }\n    }\n  }\n  /**\n   * Returns `true` is the menu is open.\n   */\n\n\n  isOpen() {\n    return Promise.resolve(this._isOpen);\n  }\n  /**\n   * Returns `true` is the menu is active.\n   *\n   * A menu is active when it can be opened or closed, meaning it's enabled\n   * and it's not part of a `ion-split-pane`.\n   */\n\n\n  isActive() {\n    return Promise.resolve(this._isActive());\n  }\n  /**\n   * Opens the menu. If the menu is already open or it can't be opened,\n   * it returns `false`.\n   */\n\n\n  open(animated = true) {\n    return this.setOpen(true, animated);\n  }\n  /**\n   * Closes the menu. If the menu is already closed or it can't be closed,\n   * it returns `false`.\n   */\n\n\n  close(animated = true) {\n    return this.setOpen(false, animated);\n  }\n  /**\n   * Toggles the menu. If the menu is already open, it will try to close, otherwise it will try to open it.\n   * If the operation can't be completed successfully, it returns `false`.\n   */\n\n\n  toggle(animated = true) {\n    return this.setOpen(!this._isOpen, animated);\n  }\n  /**\n   * Opens or closes the button.\n   * If the operation can't be completed successfully, it returns `false`.\n   */\n\n\n  setOpen(shouldOpen, animated = true) {\n    return menuController._setOpen(this, shouldOpen, animated);\n  }\n\n  _setOpen(shouldOpen, animated = true) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      // If the menu is disabled or it is currently being animated, let's do nothing\n      if (!_this3._isActive() || _this3.isAnimating || shouldOpen === _this3._isOpen) {\n        return false;\n      }\n\n      _this3.beforeAnimation(shouldOpen);\n\n      yield _this3.loadAnimation();\n      yield _this3.startAnimation(shouldOpen, animated);\n\n      _this3.afterAnimation(shouldOpen);\n\n      return true;\n    })();\n  }\n\n  loadAnimation() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      // Menu swipe animation takes the menu's inner width as parameter,\n      // If `offsetWidth` changes, we need to create a new animation.\n      const width = _this4.menuInnerEl.offsetWidth;\n\n      if (width === _this4.width && _this4.animation !== undefined) {\n        return;\n      }\n\n      _this4.width = width; // Destroy existing animation\n\n      if (_this4.animation) {\n        _this4.animation.destroy();\n\n        _this4.animation = undefined;\n      } // Create new animation\n\n\n      _this4.animation = yield menuController._createAnimation(_this4.type, _this4);\n\n      if (!config.getBoolean('animated', true)) {\n        _this4.animation.duration(0);\n      }\n\n      _this4.animation.fill('both');\n    })();\n  }\n\n  startAnimation(shouldOpen, animated) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const isReversed = !shouldOpen;\n\n      const ani = _this5.animation.direction(isReversed ? 'reverse' : 'normal').easing(isReversed ? 'cubic-bezier(0.4, 0.0, 0.6, 1)' : 'cubic-bezier(0.0, 0.0, 0.2, 1)');\n\n      if (animated) {\n        yield ani.playAsync();\n      } else {\n        ani.playSync();\n      }\n    })();\n  }\n\n  _isActive() {\n    return !this.disabled && !this.isPaneVisible;\n  }\n\n  canSwipe() {\n    return this.swipeGesture && !this.isAnimating && this._isActive();\n  }\n\n  canStart(detail) {\n    if (!this.canSwipe()) {\n      return false;\n    }\n\n    if (this._isOpen) {\n      return true; // TODO error\n    } else if (menuController._getOpenSync()) {\n      return false;\n    }\n\n    return checkEdgeSide(window, detail.currentX, this.isEndSide, this.maxEdgeStart);\n  }\n\n  onWillStart() {\n    this.beforeAnimation(!this._isOpen);\n    return this.loadAnimation();\n  }\n\n  onStart() {\n    if (!this.isAnimating || !this.animation) {\n      assert(false, 'isAnimating has to be true');\n      return;\n    } // the cloned animation should not use an easing curve during seek\n\n\n    this.animation.direction(this._isOpen ? 'reverse' : 'normal').progressStart(true);\n  }\n\n  onMove(detail) {\n    if (!this.isAnimating || !this.animation) {\n      assert(false, 'isAnimating has to be true');\n      return;\n    }\n\n    const delta = computeDelta(detail.deltaX, this._isOpen, this.isEndSide);\n    const stepValue = delta / this.width;\n    this.animation.progressStep(stepValue);\n  }\n\n  onEnd(detail) {\n    if (!this.isAnimating || !this.animation) {\n      assert(false, 'isAnimating has to be true');\n      return;\n    }\n\n    const isOpen = this._isOpen;\n    const isEndSide = this.isEndSide;\n    const delta = computeDelta(detail.deltaX, isOpen, isEndSide);\n    const width = this.width;\n    const stepValue = delta / width;\n    const velocity = detail.velocityX;\n    const z = width / 2.0;\n    const shouldCompleteRight = velocity >= 0 && (velocity > 0.2 || detail.deltaX > z);\n    const shouldCompleteLeft = velocity <= 0 && (velocity < -0.2 || detail.deltaX < -z);\n    const shouldComplete = isOpen ? isEndSide ? shouldCompleteRight : shouldCompleteLeft : isEndSide ? shouldCompleteLeft : shouldCompleteRight;\n    let shouldOpen = !isOpen && shouldComplete;\n\n    if (isOpen && !shouldComplete) {\n      shouldOpen = true;\n    }\n\n    this.lastOnEnd = detail.timeStamp; // Account for rounding errors in JS\n\n    let newStepValue = shouldComplete ? 0.001 : -0.001;\n    /**\n     * TODO: stepValue can sometimes return a negative\n     * value, but you can't have a negative time value\n     * for the cubic bezier curve (at least with web animations)\n     * Not sure if the negative step value is an error or not\n     */\n\n    const adjustedStepValue = stepValue <= 0 ? 0.01 : stepValue;\n    /**\n     * Animation will be reversed here, so need to\n     * reverse the easing curve as well\n     *\n     * Additionally, we need to account for the time relative\n     * to the new easing curve, as `stepValue` is going to be given\n     * in terms of a linear curve.\n     */\n\n    newStepValue += getTimeGivenProgression(new Point(0, 0), new Point(0.4, 0), new Point(0.6, 1), new Point(1, 1), clamp(0, adjustedStepValue, 1));\n    this.animation.easing('cubic-bezier(0.4, 0.0, 0.6, 1)').onFinish(() => this.afterAnimation(shouldOpen), {\n      oneTimeCallback: true\n    }).progressEnd(shouldComplete ? 1 : 0, newStepValue, 300);\n  }\n\n  beforeAnimation(shouldOpen) {\n    assert(!this.isAnimating, '_before() should not be called while animating'); // this places the menu into the correct location before it animates in\n    // this css class doesn't actually kick off any animations\n\n    this.el.classList.add(SHOW_MENU);\n\n    if (this.backdropEl) {\n      this.backdropEl.classList.add(SHOW_BACKDROP);\n    }\n\n    this.blocker.block();\n    this.isAnimating = true;\n\n    if (shouldOpen) {\n      this.ionWillOpen.emit();\n    } else {\n      this.ionWillClose.emit();\n    }\n  }\n\n  afterAnimation(isOpen) {\n    assert(this.isAnimating, '_before() should be called while animating'); // keep opening/closing the menu disabled for a touch more yet\n    // only add listeners/css if it's enabled and isOpen\n    // and only remove listeners/css if it's not open\n    // emit opened/closed events\n\n    this._isOpen = isOpen;\n    this.isAnimating = false;\n\n    if (!this._isOpen) {\n      this.blocker.unblock();\n    }\n\n    if (isOpen) {\n      // add css class\n      if (this.contentEl) {\n        this.contentEl.classList.add(MENU_CONTENT_OPEN);\n      } // emit open event\n\n\n      this.ionDidOpen.emit();\n    } else {\n      // remove css classes\n      this.el.classList.remove(SHOW_MENU);\n\n      if (this.contentEl) {\n        this.contentEl.classList.remove(MENU_CONTENT_OPEN);\n      }\n\n      if (this.backdropEl) {\n        this.backdropEl.classList.remove(SHOW_BACKDROP);\n      }\n\n      if (this.animation) {\n        this.animation.stop();\n      } // emit close event\n\n\n      this.ionDidClose.emit();\n    }\n  }\n\n  updateState() {\n    const isActive = this._isActive();\n\n    if (this.gesture) {\n      this.gesture.setDisabled(!isActive || !this.swipeGesture);\n    } // Close menu immediately\n\n\n    if (!isActive && this._isOpen) {\n      // close if this menu is open, and should not be enabled\n      this.forceClosing();\n    }\n\n    if (!this.disabled) {\n      menuController._setActiveMenu(this);\n    }\n\n    assert(!this.isAnimating, 'can not be animating');\n  }\n\n  forceClosing() {\n    assert(this._isOpen, 'menu cannot be closed');\n    this.isAnimating = true;\n    const ani = this.animation.direction('reverse');\n    ani.playSync();\n    this.afterAnimation(false);\n  }\n\n  render() {\n    const {\n      isEndSide,\n      type,\n      disabled,\n      mode,\n      isPaneVisible\n    } = this;\n    return h(Host, {\n      role: \"navigation\",\n      class: {\n        [mode]: true,\n        [`menu-type-${type}`]: true,\n        'menu-enabled': !disabled,\n        'menu-side-end': isEndSide,\n        'menu-side-start': !isEndSide,\n        'menu-pane-visible': isPaneVisible\n      }\n    }, h(\"div\", {\n      class: \"menu-inner\",\n      ref: el => this.menuInnerEl = el\n    }, h(\"slot\", null)), h(\"ion-backdrop\", {\n      ref: el => this.backdropEl = el,\n      class: \"menu-backdrop\",\n      tappable: false,\n      stopPropagation: false\n    }));\n  }\n\n  get el() {\n    return getElement(this);\n  }\n\n  static get watchers() {\n    return {\n      \"type\": [\"typeChanged\"],\n      \"disabled\": [\"disabledChanged\"],\n      \"side\": [\"sideChanged\"],\n      \"swipeGesture\": [\"swipeGestureChanged\"]\n    };\n  }\n\n  static get style() {\n    return \":host{--width:304px;--min-width:auto;--max-width:auto;--height:100%;--min-height:auto;--max-height:auto;--background:var(--ion-background-color,#fff);left:0;right:0;top:0;bottom:0;display:none;position:absolute;contain:strict}:host(.show-menu){display:block}.menu-inner{left:0;right:auto;top:0;bottom:0;-webkit-transform:translate3d(-9999px,0,0);transform:translate3d(-9999px,0,0);display:-ms-flexbox;display:flex;position:absolute;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:justify;justify-content:space-between;width:var(--width);min-width:var(--min-width);max-width:var(--max-width);height:var(--height);min-height:var(--min-height);max-height:var(--max-height);background:var(--background);contain:strict}:host-context([dir=rtl]) .menu-inner,[dir=rtl] .menu-inner{left:unset;right:unset;left:auto;right:0;-webkit-transform:translate3d(calc(-1 * -9999px),0,0);transform:translate3d(calc(-1 * -9999px),0,0)}:host(.menu-side-start) .menu-inner{--ion-safe-area-right:0px;right:auto;left:0}:host(.menu-side-end) .menu-inner{--ion-safe-area-left:0px;right:0;left:auto}ion-backdrop{display:none;opacity:.01;z-index:-1}\\@media (max-width:340px){.menu-inner{--width:264px}}:host(.menu-type-reveal){z-index:0}:host(.menu-type-reveal.show-menu) .menu-inner{-webkit-transform:translateZ(0);transform:translateZ(0)}:host(.menu-type-overlay){z-index:1000}:host(.menu-type-overlay) .show-backdrop{display:block;cursor:pointer}:host(.menu-pane-visible) .menu-inner{left:0;right:0;width:auto;-webkit-transform:none!important;transform:none!important;-webkit-box-shadow:none!important;box-shadow:none!important}:host(.menu-pane-visible) ion-backdrop{display:hidden!important}:host(.menu-type-push){z-index:1000}:host(.menu-type-push) .show-backdrop{display:block}\";\n  }\n\n};\n\nconst computeDelta = (deltaX, isOpen, isEndSide) => {\n  return Math.max(0, isOpen !== isEndSide ? -deltaX : deltaX);\n};\n\nconst checkEdgeSide = (win, posX, isEndSide, maxEdgeStart) => {\n  if (isEndSide) {\n    return posX >= win.innerWidth - maxEdgeStart;\n  } else {\n    return posX <= maxEdgeStart;\n  }\n};\n\nconst SHOW_MENU = 'show-menu';\nconst SHOW_BACKDROP = 'show-backdrop';\nconst MENU_CONTENT_OPEN = 'menu-content-open'; // Given a menu, return whether or not the menu toggle should be visible\n\nconst updateVisibility = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (menu) {\n    const menuEl = yield menuController.get(menu);\n    return !!(menuEl && (yield menuEl.isActive()));\n  });\n\n  return function updateVisibility(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nconst MenuButton = class {\n  constructor(hostRef) {\n    var _this6 = this;\n\n    registerInstance(this, hostRef);\n    this.visible = false;\n    /**\n     * If `true`, the user cannot interact with the menu button.\n     */\n\n    this.disabled = false;\n    /**\n     * Automatically hides the menu button when the corresponding menu is not active\n     */\n\n    this.autoHide = true;\n    /**\n     * The type of the button.\n     */\n\n    this.type = 'button';\n    this.onClick = /*#__PURE__*/_asyncToGenerator(function* () {\n      return menuController.toggle(_this6.menu);\n    });\n  }\n\n  componentDidLoad() {\n    this.visibilityChanged();\n  }\n\n  visibilityChanged() {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      _this7.visible = yield updateVisibility(_this7.menu);\n    })();\n  }\n\n  render() {\n    const {\n      color,\n      disabled\n    } = this;\n    const mode = getIonMode(this);\n    const menuIcon = config.get('menuIcon', 'menu');\n    const hidden = this.autoHide && !this.visible;\n    const attrs = {\n      type: this.type\n    };\n    return h(Host, {\n      onClick: this.onClick,\n      \"aria-disabled\": disabled ? 'true' : null,\n      \"aria-hidden\": hidden ? 'true' : null,\n      class: Object.assign(Object.assign({\n        [mode]: true\n      }, createColorClasses(color)), {\n        'button': true,\n        'menu-button-hidden': hidden,\n        'menu-button-disabled': disabled,\n        'ion-activatable': true,\n        'ion-focusable': true\n      })\n    }, h(\"button\", Object.assign({}, attrs, {\n      disabled: disabled,\n      class: \"button-native\"\n    }), h(\"slot\", null, h(\"ion-icon\", {\n      icon: menuIcon,\n      mode: mode,\n      lazy: false\n    })), mode === 'md' && h(\"ion-ripple-effect\", {\n      type: \"unbounded\"\n    })));\n  }\n\n  static get style() {\n    return \":host{--background:transparent;--color-focused:var(--color);--border-radius:initial;--padding-top:0;--padding-bottom:0;color:var(--color);text-align:center;text-decoration:none;text-overflow:ellipsis;text-transform:none;white-space:nowrap;-webkit-font-kerning:none;font-kerning:none}.button-native{border-radius:var(--border-radius);font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:var(--padding-start);padding-right:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:-ms-flexbox;display:flex;position:relative;-ms-flex-flow:row nowrap;flex-flow:row nowrap;-ms-flex-negative:0;flex-shrink:0;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%;border:0;outline:none;background:var(--background);line-height:1;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:0;-webkit-appearance:none;-moz-appearance:none;appearance:none}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){.button-native{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end)}}ion-icon{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;pointer-events:none}:host(.menu-button-hidden){display:none}:host(.menu-button-disabled){cursor:default;opacity:.5;pointer-events:none}\\@media (any-hover:hover){:host(:hover) .button-native{background:var(--background-hover);color:var(--color-hover)}}:host(.ion-focused) .button-native{background:var(--background-focused);color:var(--color-focused)}:host(.ion-color) .button-native{color:var(--ion-color-base)}:host-context(ion-toolbar:not(.ion-color)){color:var(--ion-toolbar-color,var(--color))}:host{--background-focused:rgba(var(--ion-color-primary-rgb,56,128,255),0.1);--border-radius:4px;--color:var(--ion-color-primary,#3880ff);--padding-start:5px;--padding-end:5px;height:32px;font-size:31px}:host(.activated){opacity:.4}\\@media (any-hover:hover){:host(:hover){opacity:.6}}:host(.ion-color.ion-focused) .button-native{background:rgba(var(--ion-color-base-rgb),.1)}\";\n  }\n\n};\nconst MenuController = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Open the menu. If a menu is not provided then it will open the first\n   * menu found. If the specified menu is `start` or `end`, then it will open\n   * the enabled menu on that side. Otherwise, it will try to find the menu\n   * using the menu's `id` property. If a menu is not found then it will\n   * return `false`.\n   *\n   * @param menu The menuId or side of the menu to open.\n   */\n\n\n  open(menu) {\n    return menuController.open(menu);\n  }\n  /**\n   * Close the menu. If a menu is specified, it will close that menu.\n   * If no menu is specified, then it will close any menu that is open.\n   * If it does not find any open menus, it will return `false`.\n   *\n   * @param menu The menuId or side of the menu to close.\n   */\n\n\n  close(menu) {\n    return menuController.close(menu);\n  }\n  /**\n   * Toggle the menu open or closed. If the menu is already open, it will try to\n   * close the menu, otherwise it will try to open it. Returns `false` if\n   * a menu is not found.\n   *\n   * @param menu The menuId or side of the menu to toggle.\n   */\n\n\n  toggle(menu) {\n    return menuController.toggle(menu);\n  }\n  /**\n   * Enable or disable a menu. Disabling a menu will not allow gestures\n   * for that menu or any calls to open it. This is useful when there are\n   * multiple menus on the same side and only one of them should be allowed\n   * to open. Enabling a menu will automatically disable all other menus\n   * on that side.\n   *\n   * @param enable If `true`, the menu should be enabled.\n   * @param menu The menuId or side of the menu to enable or disable.\n   */\n\n\n  enable(enable, menu) {\n    return menuController.enable(enable, menu);\n  }\n  /**\n   * Enable or disable the ability to swipe open the menu.\n   *\n   * @param enable If `true`, the menu swipe gesture should be enabled.\n   * @param menu The menuId or side of the menu to enable or disable the swipe gesture on.\n   */\n\n\n  swipeGesture(enable, menu) {\n    return menuController.swipeGesture(enable, menu);\n  }\n  /**\n   * Get whether or not the menu is open. Returns `true` if the specified\n   * menu is open. If a menu is not specified, it will return `true` if\n   * any menu is currently open.\n   *\n   * @param menu The menuId or side of the menu that is being checked.\n   */\n\n\n  isOpen(menu) {\n    return menuController.isOpen(menu);\n  }\n  /**\n   * Get whether or not the menu is enabled. Returns `true` if the\n   * specified menu is enabled. Returns `false` if a menu is disabled\n   * or not found.\n   *\n   * @param menu The menuId or side of the menu that is being checked.\n   */\n\n\n  isEnabled(menu) {\n    return menuController.isEnabled(menu);\n  }\n  /**\n   * Get a menu instance. If a menu is not provided then it will return the first\n   * menu found. If the specified menu is `start` or `end`, then it will return the\n   * enabled menu on that side. Otherwise, it will try to find the menu using the menu's\n   * `id` property. If a menu is not found then it will return `null`.\n   *\n   * @param menu The menuId or side of the menu.\n   */\n\n\n  get(menu) {\n    return menuController.get(menu);\n  }\n  /**\n   * Get the instance of the opened menu. Returns `null` if a menu is not found.\n   */\n\n\n  getOpen() {\n    return menuController.getOpen();\n  }\n  /**\n   * Get all menu instances.\n   */\n\n\n  getMenus() {\n    return menuController.getMenus();\n  }\n  /**\n   * Get whether or not a menu is animating. Returns `true` if any\n   * menu is currently animating.\n   */\n\n\n  isAnimating() {\n    return menuController.isAnimating();\n  }\n  /**\n   * Registers a new animation that can be used with any `ion-menu` by\n   * passing the name of the animation in its `type` property.\n   *\n   * @param name The name of the animation to register.\n   * @param animation The animation function to register.\n   */\n\n\n  registerAnimation(name, animation) {\n    return _asyncToGenerator(function* () {\n      return menuController.registerAnimation(name, animation);\n    })();\n  }\n\n};\nconst MenuToggle = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.visible = false;\n    /**\n     * Automatically hides the content when the corresponding menu is not active.\n     *\n     * By default, it's `true`. Change it to `false` in order to\n     * keep `ion-menu-toggle` always visible regardless the state of the menu.\n     */\n\n    this.autoHide = true;\n\n    this.onClick = () => {\n      return menuController.toggle(this.menu);\n    };\n  }\n\n  connectedCallback() {\n    this.visibilityChanged();\n  }\n\n  visibilityChanged() {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      _this8.visible = yield updateVisibility(_this8.menu);\n    })();\n  }\n\n  render() {\n    const mode = getIonMode(this);\n    const hidden = this.autoHide && !this.visible;\n    return h(Host, {\n      onClick: this.onClick,\n      \"aria-hidden\": hidden ? 'true' : null,\n      class: {\n        [mode]: true,\n        'menu-toggle-hidden': hidden\n      }\n    }, h(\"slot\", null));\n  }\n\n  static get style() {\n    return \":host(.menu-toggle-hidden){display:none}\";\n  }\n\n};\nexport { Menu as ion_menu, MenuButton as ion_menu_button, MenuController as ion_menu_controller, MenuToggle as ion_menu_toggle };","map":{"version":3,"sources":["/home/ivan/HACKUPC2022/Join/node_modules/ionic-mqtt/node_modules/@ionic/core/dist/esm/ion-menu_4-ios.entry.js"],"names":["r","registerInstance","c","getIonMode","d","createEvent","h","H","Host","e","getElement","b","config","i","isEndSide","assert","clamp","GESTURE_CONTROLLER","m","menuController","createColorClasses","g","getTimeGivenProgression","P","Point","Menu","constructor","hostRef","lastOnEnd","blocker","createBlocker","disableScroll","mode","isAnimating","_isOpen","isPaneVisible","disabled","side","swipeGesture","maxEdgeStart","ionWillOpen","ionWillClose","ionDidOpen","ionDidClose","ionMenuChange","typeChanged","type","oldType","contentEl","undefined","classList","remove","add","removeAttribute","menuInnerEl","animation","disabledChanged","updateState","emit","open","sideChanged","swipeGestureChanged","connectedCallback","get","el","parent","parentNode","contentId","console","warn","content","document","getElementById","querySelector","tagName","error","_register","gesture","createGesture","gestureName","gesturePriority","threshold","canStart","ev","onWillStart","onStart","onMove","onEnd","componentDidLoad","disconnectedCallback","destroy","_unregister","backdropEl","onSplitPaneChanged","detail","isPane","onBackdropClick","timeStamp","shouldClose","composedPath","includes","preventDefault","stopPropagation","close","isOpen","Promise","resolve","isActive","_isActive","animated","setOpen","toggle","shouldOpen","_setOpen","beforeAnimation","loadAnimation","startAnimation","afterAnimation","width","offsetWidth","_createAnimation","getBoolean","duration","fill","isReversed","ani","direction","easing","playAsync","playSync","canSwipe","_getOpenSync","checkEdgeSide","window","currentX","progressStart","delta","computeDelta","deltaX","stepValue","progressStep","velocity","velocityX","z","shouldCompleteRight","shouldCompleteLeft","shouldComplete","newStepValue","adjustedStepValue","onFinish","oneTimeCallback","progressEnd","SHOW_MENU","SHOW_BACKDROP","block","unblock","MENU_CONTENT_OPEN","stop","setDisabled","forceClosing","_setActiveMenu","render","role","class","ref","tappable","watchers","style","Math","max","win","posX","innerWidth","updateVisibility","menu","menuEl","MenuButton","visible","autoHide","onClick","visibilityChanged","color","menuIcon","hidden","attrs","Object","assign","icon","lazy","MenuController","enable","isEnabled","getOpen","getMenus","registerAnimation","name","MenuToggle","ion_menu","ion_menu_button","ion_menu_controller","ion_menu_toggle"],"mappings":"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","sourcesContent":["import { r as registerInstance, c as getIonMode, d as createEvent, h, H as Host, e as getElement } from './core-feeeff0d.js';\nimport { b as config } from './config-3c7f3790.js';\nimport { i as isEndSide, b as assert, c as clamp } from './helpers-46f4a262.js';\nimport './animation-af478fe9.js';\nimport { GESTURE_CONTROLLER } from './index-624eea58.js';\nimport { m as menuController } from './index-1e5940d5.js';\nimport { c as createColorClasses } from './theme-18cbe2cc.js';\nimport { g as getTimeGivenProgression, P as Point } from './cubic-bezier-2812fda3.js';\n\nconst Menu = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.lastOnEnd = 0;\n        this.blocker = GESTURE_CONTROLLER.createBlocker({ disableScroll: true });\n        this.mode = getIonMode(this);\n        this.isAnimating = false;\n        this._isOpen = false;\n        this.isPaneVisible = false;\n        this.isEndSide = false;\n        /**\n         * If `true`, the menu is disabled.\n         */\n        this.disabled = false;\n        /**\n         * Which side of the view the menu should be placed.\n         */\n        this.side = 'start';\n        /**\n         * If `true`, swiping the menu is enabled.\n         */\n        this.swipeGesture = true;\n        /**\n         * The edge threshold for dragging the menu open.\n         * If a drag/swipe happens over this value, the menu is not triggered.\n         */\n        this.maxEdgeStart = 50;\n        this.ionWillOpen = createEvent(this, \"ionWillOpen\", 7);\n        this.ionWillClose = createEvent(this, \"ionWillClose\", 7);\n        this.ionDidOpen = createEvent(this, \"ionDidOpen\", 7);\n        this.ionDidClose = createEvent(this, \"ionDidClose\", 7);\n        this.ionMenuChange = createEvent(this, \"ionMenuChange\", 7);\n    }\n    typeChanged(type, oldType) {\n        const contentEl = this.contentEl;\n        if (contentEl) {\n            if (oldType !== undefined) {\n                contentEl.classList.remove(`menu-content-${oldType}`);\n            }\n            contentEl.classList.add(`menu-content-${type}`);\n            contentEl.removeAttribute('style');\n        }\n        if (this.menuInnerEl) {\n            // Remove effects of previous animations\n            this.menuInnerEl.removeAttribute('style');\n        }\n        this.animation = undefined;\n    }\n    disabledChanged() {\n        this.updateState();\n        this.ionMenuChange.emit({\n            disabled: this.disabled,\n            open: this._isOpen\n        });\n    }\n    sideChanged() {\n        this.isEndSide = isEndSide(this.side);\n    }\n    swipeGestureChanged() {\n        this.updateState();\n    }\n    async connectedCallback() {\n        if (this.type === undefined) {\n            this.type = config.get('menuType', this.mode === 'ios' ? 'reveal' : 'overlay');\n        }\n        const el = this.el;\n        const parent = el.parentNode;\n        if (this.contentId === undefined) {\n            console.warn(`[DEPRECATED][ion-menu] Using the [main] attribute is deprecated, please use the \"contentId\" property instead:\nBEFORE:\n  <ion-menu>...</ion-menu>\n  <div main>...</div>\n\nAFTER:\n  <ion-menu contentId=\"my-content\"></ion-menu>\n  <div id=\"my-content\">...</div>\n`);\n        }\n        const content = this.contentId !== undefined\n            ? document.getElementById(this.contentId)\n            : parent && parent.querySelector && parent.querySelector('[main]');\n        if (!content || !content.tagName) {\n            // requires content element\n            console.error('Menu: must have a \"content\" element to listen for drag events on.');\n            return;\n        }\n        this.contentEl = content;\n        // add menu's content classes\n        content.classList.add('menu-content');\n        this.typeChanged(this.type, undefined);\n        this.sideChanged();\n        // register this menu with the app's menu controller\n        menuController._register(this);\n        this.gesture = (await import('./index-624eea58.js')).createGesture({\n            el: document,\n            gestureName: 'menu-swipe',\n            gesturePriority: 30,\n            threshold: 10,\n            canStart: ev => this.canStart(ev),\n            onWillStart: () => this.onWillStart(),\n            onStart: () => this.onStart(),\n            onMove: ev => this.onMove(ev),\n            onEnd: ev => this.onEnd(ev),\n        });\n        this.updateState();\n    }\n    async componentDidLoad() {\n        this.ionMenuChange.emit({ disabled: this.disabled, open: this._isOpen });\n        this.updateState();\n    }\n    disconnectedCallback() {\n        this.blocker.destroy();\n        menuController._unregister(this);\n        if (this.animation) {\n            this.animation.destroy();\n        }\n        if (this.gesture) {\n            this.gesture.destroy();\n            this.gesture = undefined;\n        }\n        this.animation = undefined;\n        this.contentEl = this.backdropEl = this.menuInnerEl = undefined;\n    }\n    onSplitPaneChanged(ev) {\n        this.isPaneVisible = ev.detail.isPane(this.el);\n        this.updateState();\n    }\n    onBackdropClick(ev) {\n        if (this._isOpen && this.lastOnEnd < ev.timeStamp - 100) {\n            const shouldClose = (ev.composedPath)\n                ? !ev.composedPath().includes(this.menuInnerEl)\n                : false;\n            if (shouldClose) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.close();\n            }\n        }\n    }\n    /**\n     * Returns `true` is the menu is open.\n     */\n    isOpen() {\n        return Promise.resolve(this._isOpen);\n    }\n    /**\n     * Returns `true` is the menu is active.\n     *\n     * A menu is active when it can be opened or closed, meaning it's enabled\n     * and it's not part of a `ion-split-pane`.\n     */\n    isActive() {\n        return Promise.resolve(this._isActive());\n    }\n    /**\n     * Opens the menu. If the menu is already open or it can't be opened,\n     * it returns `false`.\n     */\n    open(animated = true) {\n        return this.setOpen(true, animated);\n    }\n    /**\n     * Closes the menu. If the menu is already closed or it can't be closed,\n     * it returns `false`.\n     */\n    close(animated = true) {\n        return this.setOpen(false, animated);\n    }\n    /**\n     * Toggles the menu. If the menu is already open, it will try to close, otherwise it will try to open it.\n     * If the operation can't be completed successfully, it returns `false`.\n     */\n    toggle(animated = true) {\n        return this.setOpen(!this._isOpen, animated);\n    }\n    /**\n     * Opens or closes the button.\n     * If the operation can't be completed successfully, it returns `false`.\n     */\n    setOpen(shouldOpen, animated = true) {\n        return menuController._setOpen(this, shouldOpen, animated);\n    }\n    async _setOpen(shouldOpen, animated = true) {\n        // If the menu is disabled or it is currently being animated, let's do nothing\n        if (!this._isActive() || this.isAnimating || shouldOpen === this._isOpen) {\n            return false;\n        }\n        this.beforeAnimation(shouldOpen);\n        await this.loadAnimation();\n        await this.startAnimation(shouldOpen, animated);\n        this.afterAnimation(shouldOpen);\n        return true;\n    }\n    async loadAnimation() {\n        // Menu swipe animation takes the menu's inner width as parameter,\n        // If `offsetWidth` changes, we need to create a new animation.\n        const width = this.menuInnerEl.offsetWidth;\n        if (width === this.width && this.animation !== undefined) {\n            return;\n        }\n        this.width = width;\n        // Destroy existing animation\n        if (this.animation) {\n            this.animation.destroy();\n            this.animation = undefined;\n        }\n        // Create new animation\n        this.animation = await menuController._createAnimation(this.type, this);\n        if (!config.getBoolean('animated', true)) {\n            this.animation.duration(0);\n        }\n        this.animation.fill('both');\n    }\n    async startAnimation(shouldOpen, animated) {\n        const isReversed = !shouldOpen;\n        const ani = this.animation\n            .direction((isReversed) ? 'reverse' : 'normal')\n            .easing((isReversed) ? 'cubic-bezier(0.4, 0.0, 0.6, 1)' : 'cubic-bezier(0.0, 0.0, 0.2, 1)');\n        if (animated) {\n            await ani.playAsync();\n        }\n        else {\n            ani.playSync();\n        }\n    }\n    _isActive() {\n        return !this.disabled && !this.isPaneVisible;\n    }\n    canSwipe() {\n        return this.swipeGesture && !this.isAnimating && this._isActive();\n    }\n    canStart(detail) {\n        if (!this.canSwipe()) {\n            return false;\n        }\n        if (this._isOpen) {\n            return true;\n            // TODO error\n        }\n        else if (menuController._getOpenSync()) {\n            return false;\n        }\n        return checkEdgeSide(window, detail.currentX, this.isEndSide, this.maxEdgeStart);\n    }\n    onWillStart() {\n        this.beforeAnimation(!this._isOpen);\n        return this.loadAnimation();\n    }\n    onStart() {\n        if (!this.isAnimating || !this.animation) {\n            assert(false, 'isAnimating has to be true');\n            return;\n        }\n        // the cloned animation should not use an easing curve during seek\n        this.animation\n            .direction((this._isOpen) ? 'reverse' : 'normal')\n            .progressStart(true);\n    }\n    onMove(detail) {\n        if (!this.isAnimating || !this.animation) {\n            assert(false, 'isAnimating has to be true');\n            return;\n        }\n        const delta = computeDelta(detail.deltaX, this._isOpen, this.isEndSide);\n        const stepValue = delta / this.width;\n        this.animation.progressStep(stepValue);\n    }\n    onEnd(detail) {\n        if (!this.isAnimating || !this.animation) {\n            assert(false, 'isAnimating has to be true');\n            return;\n        }\n        const isOpen = this._isOpen;\n        const isEndSide = this.isEndSide;\n        const delta = computeDelta(detail.deltaX, isOpen, isEndSide);\n        const width = this.width;\n        const stepValue = delta / width;\n        const velocity = detail.velocityX;\n        const z = width / 2.0;\n        const shouldCompleteRight = velocity >= 0 && (velocity > 0.2 || detail.deltaX > z);\n        const shouldCompleteLeft = velocity <= 0 && (velocity < -0.2 || detail.deltaX < -z);\n        const shouldComplete = isOpen\n            ? isEndSide ? shouldCompleteRight : shouldCompleteLeft\n            : isEndSide ? shouldCompleteLeft : shouldCompleteRight;\n        let shouldOpen = !isOpen && shouldComplete;\n        if (isOpen && !shouldComplete) {\n            shouldOpen = true;\n        }\n        this.lastOnEnd = detail.timeStamp;\n        // Account for rounding errors in JS\n        let newStepValue = (shouldComplete) ? 0.001 : -0.001;\n        /**\n         * TODO: stepValue can sometimes return a negative\n         * value, but you can't have a negative time value\n         * for the cubic bezier curve (at least with web animations)\n         * Not sure if the negative step value is an error or not\n         */\n        const adjustedStepValue = (stepValue <= 0) ? 0.01 : stepValue;\n        /**\n         * Animation will be reversed here, so need to\n         * reverse the easing curve as well\n         *\n         * Additionally, we need to account for the time relative\n         * to the new easing curve, as `stepValue` is going to be given\n         * in terms of a linear curve.\n         */\n        newStepValue += getTimeGivenProgression(new Point(0, 0), new Point(0.4, 0), new Point(0.6, 1), new Point(1, 1), clamp(0, adjustedStepValue, 1));\n        this.animation\n            .easing('cubic-bezier(0.4, 0.0, 0.6, 1)')\n            .onFinish(() => this.afterAnimation(shouldOpen), { oneTimeCallback: true })\n            .progressEnd(shouldComplete ? 1 : 0, newStepValue, 300);\n    }\n    beforeAnimation(shouldOpen) {\n        assert(!this.isAnimating, '_before() should not be called while animating');\n        // this places the menu into the correct location before it animates in\n        // this css class doesn't actually kick off any animations\n        this.el.classList.add(SHOW_MENU);\n        if (this.backdropEl) {\n            this.backdropEl.classList.add(SHOW_BACKDROP);\n        }\n        this.blocker.block();\n        this.isAnimating = true;\n        if (shouldOpen) {\n            this.ionWillOpen.emit();\n        }\n        else {\n            this.ionWillClose.emit();\n        }\n    }\n    afterAnimation(isOpen) {\n        assert(this.isAnimating, '_before() should be called while animating');\n        // keep opening/closing the menu disabled for a touch more yet\n        // only add listeners/css if it's enabled and isOpen\n        // and only remove listeners/css if it's not open\n        // emit opened/closed events\n        this._isOpen = isOpen;\n        this.isAnimating = false;\n        if (!this._isOpen) {\n            this.blocker.unblock();\n        }\n        if (isOpen) {\n            // add css class\n            if (this.contentEl) {\n                this.contentEl.classList.add(MENU_CONTENT_OPEN);\n            }\n            // emit open event\n            this.ionDidOpen.emit();\n        }\n        else {\n            // remove css classes\n            this.el.classList.remove(SHOW_MENU);\n            if (this.contentEl) {\n                this.contentEl.classList.remove(MENU_CONTENT_OPEN);\n            }\n            if (this.backdropEl) {\n                this.backdropEl.classList.remove(SHOW_BACKDROP);\n            }\n            if (this.animation) {\n                this.animation.stop();\n            }\n            // emit close event\n            this.ionDidClose.emit();\n        }\n    }\n    updateState() {\n        const isActive = this._isActive();\n        if (this.gesture) {\n            this.gesture.setDisabled(!isActive || !this.swipeGesture);\n        }\n        // Close menu immediately\n        if (!isActive && this._isOpen) {\n            // close if this menu is open, and should not be enabled\n            this.forceClosing();\n        }\n        if (!this.disabled) {\n            menuController._setActiveMenu(this);\n        }\n        assert(!this.isAnimating, 'can not be animating');\n    }\n    forceClosing() {\n        assert(this._isOpen, 'menu cannot be closed');\n        this.isAnimating = true;\n        const ani = this.animation.direction('reverse');\n        ani.playSync();\n        this.afterAnimation(false);\n    }\n    render() {\n        const { isEndSide, type, disabled, mode, isPaneVisible } = this;\n        return (h(Host, { role: \"navigation\", class: {\n                [mode]: true,\n                [`menu-type-${type}`]: true,\n                'menu-enabled': !disabled,\n                'menu-side-end': isEndSide,\n                'menu-side-start': !isEndSide,\n                'menu-pane-visible': isPaneVisible\n            } }, h(\"div\", { class: \"menu-inner\", ref: el => this.menuInnerEl = el }, h(\"slot\", null)), h(\"ion-backdrop\", { ref: el => this.backdropEl = el, class: \"menu-backdrop\", tappable: false, stopPropagation: false })));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"type\": [\"typeChanged\"],\n        \"disabled\": [\"disabledChanged\"],\n        \"side\": [\"sideChanged\"],\n        \"swipeGesture\": [\"swipeGestureChanged\"]\n    }; }\n    static get style() { return \":host{--width:304px;--min-width:auto;--max-width:auto;--height:100%;--min-height:auto;--max-height:auto;--background:var(--ion-background-color,#fff);left:0;right:0;top:0;bottom:0;display:none;position:absolute;contain:strict}:host(.show-menu){display:block}.menu-inner{left:0;right:auto;top:0;bottom:0;-webkit-transform:translate3d(-9999px,0,0);transform:translate3d(-9999px,0,0);display:-ms-flexbox;display:flex;position:absolute;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:justify;justify-content:space-between;width:var(--width);min-width:var(--min-width);max-width:var(--max-width);height:var(--height);min-height:var(--min-height);max-height:var(--max-height);background:var(--background);contain:strict}:host-context([dir=rtl]) .menu-inner,[dir=rtl] .menu-inner{left:unset;right:unset;left:auto;right:0;-webkit-transform:translate3d(calc(-1 * -9999px),0,0);transform:translate3d(calc(-1 * -9999px),0,0)}:host(.menu-side-start) .menu-inner{--ion-safe-area-right:0px;right:auto;left:0}:host(.menu-side-end) .menu-inner{--ion-safe-area-left:0px;right:0;left:auto}ion-backdrop{display:none;opacity:.01;z-index:-1}\\@media (max-width:340px){.menu-inner{--width:264px}}:host(.menu-type-reveal){z-index:0}:host(.menu-type-reveal.show-menu) .menu-inner{-webkit-transform:translateZ(0);transform:translateZ(0)}:host(.menu-type-overlay){z-index:1000}:host(.menu-type-overlay) .show-backdrop{display:block;cursor:pointer}:host(.menu-pane-visible) .menu-inner{left:0;right:0;width:auto;-webkit-transform:none!important;transform:none!important;-webkit-box-shadow:none!important;box-shadow:none!important}:host(.menu-pane-visible) ion-backdrop{display:hidden!important}:host(.menu-type-push){z-index:1000}:host(.menu-type-push) .show-backdrop{display:block}\"; }\n};\nconst computeDelta = (deltaX, isOpen, isEndSide) => {\n    return Math.max(0, isOpen !== isEndSide ? -deltaX : deltaX);\n};\nconst checkEdgeSide = (win, posX, isEndSide, maxEdgeStart) => {\n    if (isEndSide) {\n        return posX >= win.innerWidth - maxEdgeStart;\n    }\n    else {\n        return posX <= maxEdgeStart;\n    }\n};\nconst SHOW_MENU = 'show-menu';\nconst SHOW_BACKDROP = 'show-backdrop';\nconst MENU_CONTENT_OPEN = 'menu-content-open';\n\n// Given a menu, return whether or not the menu toggle should be visible\r\nconst updateVisibility = async (menu) => {\r\n    const menuEl = await menuController.get(menu);\r\n    return !!(menuEl && await menuEl.isActive());\r\n};\n\nconst MenuButton = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.visible = false;\n        /**\n         * If `true`, the user cannot interact with the menu button.\n         */\n        this.disabled = false;\n        /**\n         * Automatically hides the menu button when the corresponding menu is not active\n         */\n        this.autoHide = true;\n        /**\n         * The type of the button.\n         */\n        this.type = 'button';\n        this.onClick = async () => {\n            return menuController.toggle(this.menu);\n        };\n    }\n    componentDidLoad() {\n        this.visibilityChanged();\n    }\n    async visibilityChanged() {\n        this.visible = await updateVisibility(this.menu);\n    }\n    render() {\n        const { color, disabled } = this;\n        const mode = getIonMode(this);\n        const menuIcon = config.get('menuIcon', 'menu');\n        const hidden = this.autoHide && !this.visible;\n        const attrs = {\n            type: this.type\n        };\n        return (h(Host, { onClick: this.onClick, \"aria-disabled\": disabled ? 'true' : null, \"aria-hidden\": hidden ? 'true' : null, class: Object.assign(Object.assign({ [mode]: true }, createColorClasses(color)), { 'button': true, 'menu-button-hidden': hidden, 'menu-button-disabled': disabled, 'ion-activatable': true, 'ion-focusable': true }) }, h(\"button\", Object.assign({}, attrs, { disabled: disabled, class: \"button-native\" }), h(\"slot\", null, h(\"ion-icon\", { icon: menuIcon, mode: mode, lazy: false })), mode === 'md' && h(\"ion-ripple-effect\", { type: \"unbounded\" }))));\n    }\n    static get style() { return \":host{--background:transparent;--color-focused:var(--color);--border-radius:initial;--padding-top:0;--padding-bottom:0;color:var(--color);text-align:center;text-decoration:none;text-overflow:ellipsis;text-transform:none;white-space:nowrap;-webkit-font-kerning:none;font-kerning:none}.button-native{border-radius:var(--border-radius);font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:var(--padding-start);padding-right:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:-ms-flexbox;display:flex;position:relative;-ms-flex-flow:row nowrap;flex-flow:row nowrap;-ms-flex-negative:0;flex-shrink:0;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%;border:0;outline:none;background:var(--background);line-height:1;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:0;-webkit-appearance:none;-moz-appearance:none;appearance:none}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){.button-native{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end)}}ion-icon{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;pointer-events:none}:host(.menu-button-hidden){display:none}:host(.menu-button-disabled){cursor:default;opacity:.5;pointer-events:none}\\@media (any-hover:hover){:host(:hover) .button-native{background:var(--background-hover);color:var(--color-hover)}}:host(.ion-focused) .button-native{background:var(--background-focused);color:var(--color-focused)}:host(.ion-color) .button-native{color:var(--ion-color-base)}:host-context(ion-toolbar:not(.ion-color)){color:var(--ion-toolbar-color,var(--color))}:host{--background-focused:rgba(var(--ion-color-primary-rgb,56,128,255),0.1);--border-radius:4px;--color:var(--ion-color-primary,#3880ff);--padding-start:5px;--padding-end:5px;height:32px;font-size:31px}:host(.activated){opacity:.4}\\@media (any-hover:hover){:host(:hover){opacity:.6}}:host(.ion-color.ion-focused) .button-native{background:rgba(var(--ion-color-base-rgb),.1)}\"; }\n};\n\nconst MenuController = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    /**\n     * Open the menu. If a menu is not provided then it will open the first\n     * menu found. If the specified menu is `start` or `end`, then it will open\n     * the enabled menu on that side. Otherwise, it will try to find the menu\n     * using the menu's `id` property. If a menu is not found then it will\n     * return `false`.\n     *\n     * @param menu The menuId or side of the menu to open.\n     */\n    open(menu) {\n        return menuController.open(menu);\n    }\n    /**\n     * Close the menu. If a menu is specified, it will close that menu.\n     * If no menu is specified, then it will close any menu that is open.\n     * If it does not find any open menus, it will return `false`.\n     *\n     * @param menu The menuId or side of the menu to close.\n     */\n    close(menu) {\n        return menuController.close(menu);\n    }\n    /**\n     * Toggle the menu open or closed. If the menu is already open, it will try to\n     * close the menu, otherwise it will try to open it. Returns `false` if\n     * a menu is not found.\n     *\n     * @param menu The menuId or side of the menu to toggle.\n     */\n    toggle(menu) {\n        return menuController.toggle(menu);\n    }\n    /**\n     * Enable or disable a menu. Disabling a menu will not allow gestures\n     * for that menu or any calls to open it. This is useful when there are\n     * multiple menus on the same side and only one of them should be allowed\n     * to open. Enabling a menu will automatically disable all other menus\n     * on that side.\n     *\n     * @param enable If `true`, the menu should be enabled.\n     * @param menu The menuId or side of the menu to enable or disable.\n     */\n    enable(enable, menu) {\n        return menuController.enable(enable, menu);\n    }\n    /**\n     * Enable or disable the ability to swipe open the menu.\n     *\n     * @param enable If `true`, the menu swipe gesture should be enabled.\n     * @param menu The menuId or side of the menu to enable or disable the swipe gesture on.\n     */\n    swipeGesture(enable, menu) {\n        return menuController.swipeGesture(enable, menu);\n    }\n    /**\n     * Get whether or not the menu is open. Returns `true` if the specified\n     * menu is open. If a menu is not specified, it will return `true` if\n     * any menu is currently open.\n     *\n     * @param menu The menuId or side of the menu that is being checked.\n     */\n    isOpen(menu) {\n        return menuController.isOpen(menu);\n    }\n    /**\n     * Get whether or not the menu is enabled. Returns `true` if the\n     * specified menu is enabled. Returns `false` if a menu is disabled\n     * or not found.\n     *\n     * @param menu The menuId or side of the menu that is being checked.\n     */\n    isEnabled(menu) {\n        return menuController.isEnabled(menu);\n    }\n    /**\n     * Get a menu instance. If a menu is not provided then it will return the first\n     * menu found. If the specified menu is `start` or `end`, then it will return the\n     * enabled menu on that side. Otherwise, it will try to find the menu using the menu's\n     * `id` property. If a menu is not found then it will return `null`.\n     *\n     * @param menu The menuId or side of the menu.\n     */\n    get(menu) {\n        return menuController.get(menu);\n    }\n    /**\n     * Get the instance of the opened menu. Returns `null` if a menu is not found.\n     */\n    getOpen() {\n        return menuController.getOpen();\n    }\n    /**\n     * Get all menu instances.\n     */\n    getMenus() {\n        return menuController.getMenus();\n    }\n    /**\n     * Get whether or not a menu is animating. Returns `true` if any\n     * menu is currently animating.\n     */\n    isAnimating() {\n        return menuController.isAnimating();\n    }\n    /**\n     * Registers a new animation that can be used with any `ion-menu` by\n     * passing the name of the animation in its `type` property.\n     *\n     * @param name The name of the animation to register.\n     * @param animation The animation function to register.\n     */\n    async registerAnimation(name, animation) {\n        return menuController.registerAnimation(name, animation);\n    }\n};\n\nconst MenuToggle = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.visible = false;\n        /**\n         * Automatically hides the content when the corresponding menu is not active.\n         *\n         * By default, it's `true`. Change it to `false` in order to\n         * keep `ion-menu-toggle` always visible regardless the state of the menu.\n         */\n        this.autoHide = true;\n        this.onClick = () => {\n            return menuController.toggle(this.menu);\n        };\n    }\n    connectedCallback() {\n        this.visibilityChanged();\n    }\n    async visibilityChanged() {\n        this.visible = await updateVisibility(this.menu);\n    }\n    render() {\n        const mode = getIonMode(this);\n        const hidden = this.autoHide && !this.visible;\n        return (h(Host, { onClick: this.onClick, \"aria-hidden\": hidden ? 'true' : null, class: {\n                [mode]: true,\n                'menu-toggle-hidden': hidden,\n            } }, h(\"slot\", null)));\n    }\n    static get style() { return \":host(.menu-toggle-hidden){display:none}\"; }\n};\n\nexport { Menu as ion_menu, MenuButton as ion_menu_button, MenuController as ion_menu_controller, MenuToggle as ion_menu_toggle };\n"]},"metadata":{},"sourceType":"module"}